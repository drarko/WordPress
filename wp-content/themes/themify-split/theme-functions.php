<?php
/***************************************************************************
 *  					Theme Functions
 * 	----------------------------------------------------------------------
 * 						DO NOT EDIT THIS FILE
 *	----------------------------------------------------------------------
 *
 *  					Copyright (C) Themify
 * 						http://themify.me
 *
 *  To add custom PHP functions to the theme, create a new 'custom-functions.php' file in the theme folder.
 *  They will be added to the theme automatically.
 *
 ***************************************************************************/

/////// Actions ////////
// Init post, page and additional post types if they exist
add_action( 'after_setup_theme', 'themify_theme_after_setup_theme' );

// Enqueue scripts and styles required by theme
add_action( 'wp_enqueue_scripts', 'themify_theme_enqueue_scripts', 11 );
add_action( 'admin_enqueue_scripts', 'themify_theme_admin_enqueue_scripts' );

// Browser compatibility
add_action( 'wp_head', 'themify_viewport_tag' );

// Register custom menu
add_action( 'init', 'themify_register_custom_nav' );

// Register sidebars
add_action( 'widgets_init', 'themify_theme_register_sidebars' );

// Add theme specific classes in body tag
add_filter( 'body_class', 'themify_theme_body_class' );

// Add loading animation
add_action( 'themify_body_start', 'themify_theme_add_split_loader' );
add_action( 'wp_footer', 'themify_theme_split_loader_in_builder_layout_page' );

/////// Filters ////////
add_filter( 'themify_builder_create_animation_selectors', 'themify_theme_builder_create_animation_selectors' );
add_filter( 'themify_builder_animation_inview_selectors', 'themify_theme_builder_animation_inview_selectors' );

/**
 * Enqueue Stylesheets and Scripts
 * @since 1.0.0
 */
function themify_theme_enqueue_scripts(){
	global $themify;

	// Get theme version for Themify theme scripts and styles
	$theme_version = wp_get_theme()->display( 'Version' );

	// Check split scroll & disable it on mobile and customizer
	$split_scroll = themify_theme_has_split_scroll();

	///////////////////
	// Enqueue styles
	///////////////////

	wp_register_style( 'themify-icons', THEMIFY_URI . '/themify-icons/themify-icons.css', array(), THEMIFY_VERSION );

	// Themify base styling
	wp_enqueue_style( 'theme-style', get_stylesheet_uri(), array( 'themify-icons' ), $theme_version );

	// Themify Media Queries CSS
	wp_enqueue_style( 'themify-media-queries', THEME_URI . '/media-queries.css', array(), $theme_version );

	// User stylesheet
	if ( is_file( TEMPLATEPATH . '/custom_style.css' ) ) {
		wp_enqueue_style( 'custom-style', THEME_URI . '/custom_style.css' );
	}

	// Google Web Fonts embedding
	wp_enqueue_style( 'google-fonts', themify_https_esc( 'http://fonts.googleapis.com/css' ). '?family=Montserrat:400,700|Roboto+Slab:700,400|Sorts+Mill+Goudy:400,400italic&subset=latin,latin-ext' );

	///////////////////
	// Enqueue scripts
	///////////////////

	// Slide mobile navigation menu
	wp_enqueue_script( 'slide-nav', THEMIFY_URI . '/js/themify.sidemenu.js', array( 'jquery' ), $theme_version, true );

	// Masonry layout
	wp_enqueue_script( 'themify-isotope', THEME_URI . '/js/jquery.isotope.min.js', array(), $theme_version, true );

	if ( is_home() || is_archive() || themify_is_query_page() || is_search() ) {
		// Infinite scroll
		wp_enqueue_script( 'infinitescroll', THEME_URI . '/js/jquery.infinitescroll.min.js', array('jquery'), false, true );
	}

	// One Page Scroll
	wp_enqueue_script( 'jquery-effects-core' );
	if ( $split_scroll ) {
		wp_enqueue_script( 'themify-splitscroll', THEME_URI . '/js/splitscroll.js', array( 'jquery', 'jquery-effects-core' ), $theme_version, true );
	}
	wp_enqueue_script( 'theme-waypoints', THEMIFY_URI . '/js/waypoints.min.js', array('jquery'), false, true );

	// Sticky Elements
	wp_enqueue_script( 'themify-sticky', THEME_URI . '/js/jsticky.js', array( 'jquery' ), $theme_version, true );

	// Backstretch for .single-post.sidebar-none .post-image img
	$featured_image = themify_theme_get_featured_image();
	if ( is_single() && ! empty( $featured_image ) ) {
		wp_enqueue_script( 'themify-backstretch', THEMIFY_URI . '/js/backstretch.js', array( 'jquery' ), $theme_version, true );
	}

	// BigVideo for .single-post.sidebar-none .post-image img
	$video_file = themify_get( 'video_url' );
	if ( is_single() && $video_file && 'mp4' == substr( $video_file, -3, 3 ) ) {
		$video_url = $video_file;
		wp_enqueue_script( 'themify-videojs-js', THEMIFY_URI . '/js/video.js', array( 'jquery' ) );
		wp_enqueue_script( 'themify-bigvideo-js', THEMIFY_URI . '/js/bigvideo.js', array( 'themify-videojs-js' ) );
	} else {
		$video_url = '';
	}

	// Themify internal scripts
	wp_enqueue_script( 'theme-script', THEME_URI . '/js/themify.script.js', array( 'jquery' ), $theme_version, true );


	global $wp_query;

	// Prepare JS variables
	$themify_script_vars = array(
		'lightbox' => themify_lightbox_vars_init(),
		'lightboxContext' => apply_filters( 'themify_lightbox_context', '#pagewrap' ),
		'backImage' => 'yes' != $themify->hide_image ? esc_url( $featured_image ) : '',
		'backVideo' => esc_url( $video_url ),
		'splitScroll' => $split_scroll,
		'splitScrollThreshold' => 680,
		'scrollHighlight' => array(
			'scroll' => 'external', // performed by themes
		),
		'protectLinks' => '.cat-item a,.gallery-icon a[href$=jpg],.gallery-icon a[href$=jpeg],.gallery-icon a[href$=png],.gallery-icon a[href$=gif], .builder-contact-fields > button[type=submit]',
		'doNotTriggerExit' => 'a:not([href^="#"],[href^=\.\.],[href=\'\'],[target="_blank"],.builder_cancel_lightbox,.row-slider-arrow,.remove,.single_add_to_cart_button,.add_to_cart_button,.respond,.comment-reply-link,#cancel-comment-reply-link,.row-slider-dot,.themify-no-exit),button:not(.single_add_to_cart_button,.mfp-close,.mfp-arrow,.themify-no-exit,.wpcf7-submit)',
		'pageLoaderEffect' => themify_theme_has_page_loader(),
		'loadingImg'   	=> THEME_URI . '/images/loading.gif',
		'maxPages'	   	=> $wp_query->max_num_pages,
		'autoInfinite' 	=> themify_check( 'setting-autoinfinite' ) ? 'no': 'auto',
		'scrollToNewOnLoad' => 'scroll',
		'resetFilterOnLoad' => '',
                'url'=>THEME_URI
	);

	// Pass variable values to JavaScript
	wp_localize_script( 'theme-script', 'themifyScript', apply_filters( 'themify_script_vars', $themify_script_vars ) );

	// WordPress internal script to move the comment box to the right place when replying to a user
	if ( is_single() || is_page() ) wp_enqueue_script( 'comment-reply' );

	// Dequeue builder scroll highlight when fullpage scroll enabled
	if ( $split_scroll ) {
		wp_dequeue_script( 'themify-scroll-highlight' );
	}
}
/**
 * Set the fixed-header selector for the scroll highlight script
 *
 * @since 1.0.0
 */
function themify_theme_scroll_highlight_vars( $vars ) {
	$vars['fixedHeaderSelector'] = '#headerwrap';
	return $vars;
}
add_filter( 'themify_builder_scroll_highlight_vars', 'themify_theme_scroll_highlight_vars' );

/**
 * Add viewport tag for responsive layouts
 * @since 1.0.0
 */
function themify_viewport_tag() {
	echo "\n".'<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">'."\n";
}

if ( ! function_exists( 'themify_theme_after_setup_theme' ) ) {
	/**
	 * Register theme support.
	 *
	 * Initialize custom panel with its definitions.
	 * Custom panel definitions are located in admin/post-type-TYPE.php
	 *
	 * @since 1.0.7
	 */
	function themify_theme_after_setup_theme() {
		// Enable WordPress feature image
		add_theme_support( 'post-thumbnails' );

		// Load required files for post, page and custom post types where it applies
		foreach ( array( 'post', 'page', 'portfolio', 'product' ) as $type ) {
			require_once( "admin/post-type-$type.php" );
		}
		/**
		 * Navigation menus used in page custom panel to specify a custom menu for the page.
		 * @since 1.0.0
		 * @var array
		 */
		$nav_menus = array(	array( 'name' => '', 'value' => '', 'selected' => true ) );
		foreach ( get_terms( 'nav_menu' ) as $menu ) {
			$nav_menus[] = array( 'name' => $menu->name, 'value' => $menu->slug );
		}

		themify_build_write_panels( apply_filters( 'themify_theme_meta_boxes',
			array(
				array(
					'name'		=> __( 'Post Options', 'themify' ),
					'id'		=> 'post-options',
					'options'	=> themify_theme_post_meta_box(),
					'pages'		=> 'post'
				),
				array(
					'name'    => __( 'Post Appearance', 'themify' ),
					'id'      => 'post-appearance',
					'options' => themify_theme_post_appearance_meta_box(),
					'pages'   => 'post'
				),
				array(
					'name'		=> __( 'Page Options', 'themify' ),
					'id'		=> 'page-options',
					'options'	=> themify_theme_page_meta_box( array(
						'nav_menus' => $nav_menus,
					) ),
					'pages'		=> 'page'
				),
				array(
					'name'    => __( 'Page Appearance', 'themify' ),
					'id'      => 'page-appearance',
					'options' => themify_theme_page_appearance_meta_box(),
					'pages'   => 'page'
				),
				array(
					'name'		=> __( 'Query Posts', 'themify' ),
					'id'		=> 'query-posts',
					'options'	=> themify_theme_query_post_meta_box(),
					'pages'		=> 'page'
				),
				array(
					'name'    => __( 'Portfolio Options', 'themify' ),
					'id'      => 'portfolio-options',
					'options' => themify_theme_portfolio_meta_box( array(
						'nav_menus' => $nav_menus,
					) ),
					'pages'   => 'portfolio'
				),
				array(
					'name'    => __( 'Query Portfolios', 'themify' ),
					'id'      => 'query-portfolio',
					'options' => themify_theme_query_portfolio_meta_box(),
					'pages'   => 'page'
				),
			)
		));
	}
}

if ( ! function_exists( 'themify_theme_has_submenu' ) ) {
	/**
	 * Sets custom class if menu item has a submenu.
	 *
	 * @since 1.0.0
	 *
	 * @param array $sorted_menu_items The menu items to filter.
	 *
	 * @return array The filtered menu items.
	 */
	function themify_theme_has_submenu( $sorted_menu_items ) {
		$last_top = 0;
		foreach ( $sorted_menu_items as $key => $obj ) {
			if ( 0 == $obj->menu_item_parent ) {
				$last_top = $key;
			} else {
				$sorted_menu_items[$last_top]->classes['has-sub-menu'] = 'has-sub-menu';
			}
		}
		return $sorted_menu_items;
	}
	add_filter( 'wp_nav_menu_objects', 'themify_theme_has_submenu', 10 );
}

if ( ! function_exists( 'themify_register_custom_nav' ) ) {
	/**
	 * Register Custom Menu Function
	 * @since 1.0.0
	 */
	function themify_register_custom_nav() {
		register_nav_menus( array(
			'main-nav' => __( 'Main Navigation', 'themify' ),
			'footer-nav' => __( 'Footer Navigation', 'themify' ),
		));
	}
}

if ( ! function_exists( 'themify_default_main_nav' ) ) {
	/**
	 * Default Main Nav Function
	 * @since 1.0.0
	 */
	function themify_default_main_nav() {
		echo '<ul id="main-nav" class="main-nav clearfix">';
			wp_list_pages( 'title_li=' );
		echo '</ul>';
	}
}

if ( ! function_exists( 'themify_theme_menu_nav' ) ) {
	/**
	 * Sets custom menu selected in page custom panel as navigation, otherwise sets the default.
	 *
	 * @since 1.0.0
	 */
	function themify_theme_menu_nav() {
		$args = array(
			'theme_location' => 'main-nav',
			'fallback_cb'    => 'themify_default_main_nav',
			'container'      => '',
			'menu_id'        => 'main-nav',
			'menu_class'     => 'main-nav'
		);
		// Get entry ID reliably
		$queried_object = get_queried_object();
		$entry_id = isset( $queried_object->ID ) ? $queried_object->ID : 0;

		// Compile menu arguments
		$args = wp_parse_args( $args, array(
			'theme_location' => 'main-nav',
			'fallback_cb' => 'themify_default_main_nav',
			'container'   => '',
			'menu_id'     => 'main-nav',
			'menu_class'  => 'main-nav'
		));

		// See if the page has a menu assigned
		$custom_menu = get_post_meta( $entry_id, 'custom_menu', true );
		if ( ! empty( $custom_menu ) ) {
			$args['menu'] = $custom_menu;
		}

		// Render the menu
		wp_nav_menu( $args );
	}
}

if ( ! function_exists( 'themify_theme_register_sidebars' ) ) {
	/**
	 * Register sidebars
	 * @since 1.0.0
	 */
	function themify_theme_register_sidebars() {
		$sidebars = array(
			array(
				'name' => __( 'Sidebar', 'themify' ),
				'id' => 'sidebar-main',
				'before_widget' => '<div id="%1$s" class="widget %2$s">',
				'after_widget' => '</div>',
				'before_title' => '<h4 class="widgettitle">',
				'after_title' => '</h4>',
			),
			array(
				'name' => __( 'Social Widget', 'themify' ),
				'id' => 'social-widget',
				'before_widget' => '<div id="%1$s" class="widget %2$s">',
				'after_widget' => '</div>',
				'before_title' => '<strong>',
				'after_title' => '</strong>',
			)
		);
		foreach( $sidebars as $sidebar ) {
			register_sidebar( $sidebar );
		}

		// Footer Sidebars
		themify_register_grouped_widgets();
	}
}

if ( ! function_exists( '_wp_render_title_tag' ) ) {
	/**
	 * Fallback to render title before WP 4.1
	 *
	 * @since 1.0.0
	 */
	function themify_theme_render_title() { ?>
		<title><?php wp_title(); ?></title>
	<?php
	}
	// Fallback WP Title
	add_action( 'wp_head', 'themify_theme_render_title' );
} else {
	// Add Title Tag support
	add_theme_support( 'title-tag' );
	/**
	 * Remove last part of title to keep the traditional Themify theme title.
	 *
	 * @since 1.0.0
	 *
	 * @param string $title
	 *
	 * @return string
	 */
	function themify_theme_title_tag( $title ) {
		if ( ! is_front_page() ) {
			$title = str_replace( get_bloginfo( 'name' ), '', $title );
		}
		return $title;
	}
	// Generate title
	add_filter( 'wp_title', 'themify_theme_title_tag', 10 );
}

if ( ! function_exists( 'themify_theme_comment' ) ) {
	/**
	 * Custom Theme Comment
	 *
	 * @since 1.0.0
	 *
	 * @param object $comment Current comment.
	 * @param array $args Parameters for comment reply link.
	 * @param int $depth Maximum comment nesting depth.
	 */
	function themify_theme_comment($comment, $args, $depth) {
	   $GLOBALS['comment'] = $comment; ?>

		<li id="comment-<?php comment_ID() ?>">
			<p class="comment-author">
				<?php echo get_avatar( $comment, $size = '48' ); ?>
				<cite <?php comment_class(); ?>><span <?php comment_class(); ?>><?php echo get_comment_author_link(); ?></span></cite>
				<br />
				<small class="comment-time">
					<?php comment_date( apply_filters( 'themify_comment_date', '' ) ); ?>
					 @
					<?php comment_time( apply_filters( 'themify_comment_time', '' ) ); ?>
					<?php edit_comment_link( __( 'Edit', 'themify' ),' [',']' ); ?>
				</small>
			</p>
			<div class="commententry">
				<?php if ($comment->comment_approved == '0' ) : ?>
					<p><em><?php _e( 'Your comment is awaiting moderation.', 'themify' ) ?></em></p>
				<?php endif; ?>
				<?php comment_text(); ?>
			</div>
			<p class="reply">
				<?php comment_reply_link(array_merge( $args, array( 'add_below' => 'comment', 'depth' => $depth, 'reply_text' => __( 'Reply', 'themify' ), 'max_depth' => $args['max_depth']))) ?>
			</p>
		<?php
	}
}

/**
 * Apply some transition effect
 * @param array $setup
 * @return array
 */
function themify_theme_builder_create_animation_selectors( $selectors ) {
	return array(
		'selectors' => array(
			'.section-post .shortcode.list-posts', '.section-post .shortcode.team',
			'.section-post .shortcode.portfolio', '.section-post .shortcode.highlight',
			'.section-post .module-portfolio', '.section-post .module-highlight',
			'.shortcode.col4-3', '.shortcode.col4-2', '.shortcode.col4-1',
			'.shortcode.col3-2', '.shortcode.col3-1', '.shortcode.col2-1',
			'body:not(.query-section) .loops-wrapper.list-post', 'body:not(.query-section) .loops-wrapper.grid4', 'body:not(.query-section) .loops-wrapper.grid3', 'body:not(.query-section) .loops-wrapper.grid2', 'body:not(.query-section) .loops-wrapper.grid2-thumb', 'body:not(.query-section) .loops-wrapper.list-thumb-image'
		),
		'specificSelectors' => array(
			'.themify_builder_content .themify_builder_row',
			'.themify_builder_content .builder-posts-wrap > .post.wow',
		),
	);
}
/**
 * Extend animation selector on inview
 * @param string $selector
 * @return string
 */
function themify_theme_builder_animation_inview_selectors( $selectors ) {
	return array(
		'.loops-wrapper.fly-in > .post',
		'.loops-wrapper.fade-in > .post',
		'.loops-wrapper.slide-up > .post',
		'.shortcode.col4-3', '.shortcode.col4-2', '.shortcode.col4-1',
		'.shortcode.col3-2', '.shortcode.col3-1', '.shortcode.col2-1',
	);
}

/**
 * Output required classes like transition setting, builder row scrolling setting.
 * In single views, check if there's a video and add class accordingly.
 *
 * @since 1.0.0
 *
 * @param array $classes
 *
 * @return array
 */
function themify_theme_body_class( $classes ) {
	if ( themify_theme_has_page_loader() ) {
		$classes[] = 'hidden-view';
	} else {
		$classes[] = 'ready-view';
	}

	if ( themify_theme_has_split_scroll() ) {
		$classes[] = 'split-scroll';
	}

	if ( is_single() && '' != themify_get( 'video_url' ) ) {
		$classes[] = 'has-video';
	}

	// Header Design
	$header = themify_area_design( 'header' );
	$classes[] = 'none' == $header ? 'header-none' : $header;

	if ( is_singular() && 'transparent' == themify_get( 'header_wrap' ) ) {
		$classes[] = 'transparent-header';
	}
        if(themify_is_touch('tablet')){
            $classes[] = 'istablet';
        }
	// Check if masonry is enabled
	$classes[] = themify_theme_is_masonry_enabled();

	return $classes;
}

/**
 * Checks if masonry is enabled in this query page or in the default index layout settings.
 *
 * @since 1.0.0
 *
 * @return string
 */
function themify_theme_is_masonry_enabled() {
	$do_masonry = '';
	$post_type = '';
	if ( themify_is_query_page() ) {
		global $themify;
		if ( isset($themify->query_post_type) && !in_array( $themify->query_post_type, array( 'post', 'page' ) ) ) {
			$post_type = $themify->query_post_type . '_';
		}
		$enable_masonry = themify_get( $post_type . 'disable_masonry' );
		if ( 'yes' == $enable_masonry ) {
			$do_masonry = 'masonry-enabled';
		} elseif ( 'default' == $enable_masonry || '' == $enable_masonry ) {
			if ( 'no' != themify_get( 'setting-' . $post_type . 'disable_masonry' ) ) {
				$do_masonry = 'masonry-enabled';
			}
		}
	} else {
		if ( ! is_search() ) {
			$post_type = 'post' == get_post_type() ? '' : get_post_type() . '_';
		}
		if ( 'no' != themify_get( 'setting-' . $post_type . 'disable_masonry' ) ) {
			$do_masonry = 'masonry-enabled';
		}
	}
	return $do_masonry;
}

if ( ! function_exists( 'themify_theme_show_area' ) ) {
	/**
	 * Checks whether to show a certain layout area or not.
	 *
	 * @param string $area
	 *
	 * @return bool
	 */
	function themify_theme_show_area( $area = '' ) {
		if ( 'header' == $area ) {
			return 'none' == themify_area_design( 'header' ) ? false : true;
		} else {
			if ( ( is_singular() || is_post_type_archive( 'product' ) ) && ! is_attachment() ) {
				global $themify;
				$exclude = get_post_meta( $themify->page_id, 'exclude_' . $area, true );
				if ( 'yes' == $exclude ) {
					return false;
				} elseif ( 'no' == $exclude ) {
					return true;
				} else {
					return themify_check( 'setting-exclude_' . $area ) ? false : true;
				}
			} elseif ( themify_check( 'setting-exclude_' . $area ) ) {
				return false;
			}
		}

		return true;
	}
}

if ( ! function_exists( 'themify_theme_do_not_exclude_all' ) ) {
	/**
	 * Checks if all the elements in a certain area have been excluded.
	 *
	 * @param string $area
	 *
	 * @return bool
	 */
	function themify_theme_do_not_exclude_all( $area = 'header' ) {
		if ( 'mobile-menu' == $area ) {
			return themify_theme_show_area( 'search_form' ) || themify_theme_show_area( 'social_widget' ) || themify_theme_show_area( 'rss' ) || themify_theme_show_area( 'menu_navigation' );
		} elseif ( 'header' == $area ) {
			return themify_theme_show_area( 'site_logo' ) || themify_theme_show_area( 'site_tagline' ) || themify_theme_show_area( 'search_form' ) || themify_theme_show_area( 'social_widget' ) || themify_theme_show_area( 'rss' ) || themify_theme_show_area( 'menu_navigation' );
		}
		return false;
	}
}

if ( ! function_exists( 'themify_theme_custom_post_css' ) ) {
	/**
	 * Outputs custom post CSS at the end of a post
	 * @since 1.0.0
	 */
	function themify_theme_custom_post_css() {
		global $themify;
		if ( in_array( get_post_type(), array( 'post', 'page', 'portfolio', 'product' ) ) ) {
			$post_id = $themify->page_id;
			if ( is_page() ) {
				if ( is_post_type_archive( 'product' ) ) {
					$entry_id = '.post-type-archive-product';
				} else {
					$entry_id = '.page-id-' . $post_id;
				}
			} else {
				$entry_id = '.postid-' . $post_id;
			}
			$headerwrap = $entry_id . ' #headerwrap';
			$site_logo = $entry_id . ' #site-logo';
			$site_description = $entry_id . ' #site-description';
			$main_nav = $entry_id . ' #main-nav';
			$social_widget = $entry_id . ' .social-widget';
			$css = array();
			$style = '';
			$rules = array();

			if ( 'transparent' != get_post_meta( $post_id, 'header_wrap', true ) ) {
				$rules = array(
					$headerwrap => array(
						array(
							'prop' => 'background-color',
							'key'  => 'background_color'
						),
						array(
							'prop' => 'background-image',
							'key'  => 'background_image'
						),
						array(
							'prop' => 'background-repeat',
							'key'  => 'background_repeat',
							'dependson' => array(
								'prop' => 'background-image',
								'key'  => 'background_image'
							),
						),
					),
					"$entry_id #site-logo span:after, $entry_id #headerwrap #searchform, $entry_id #main-nav .current_page_item a, $entry_id #main-nav .current-menu-item a" => array(
							array(
								'prop' => 'border-color',
								'key'  => 'headerwrap_text_color'
							),
					),
				);
			}

			$rules["$headerwrap, $site_logo, $site_description"] = array(
				array(
					'prop' => 'color',
					'key'  => 'headerwrap_text_color'
				),
			);

			$rules["$site_logo a, $site_description a, $social_widget a, $main_nav > li > a"] = array(
				array(
					'prop' => 'color',
					'key'  => 'headerwrap_link_color'
				),
			);

			foreach ( $rules as $selector => $property ) {
				foreach ( $property as $val ) {
					$prop = $val['prop'];
					$key = $val['key'];
					if ( is_array( $key ) ) {
						if ( $prop == 'font-size' && ( $key_zero = get_post_meta( $post_id, $key[0], true ) ) ) {
							$css[$selector][$prop] = $prop . ': ' . $key_zero .get_post_meta( $post_id, $key[1], true );
						}
					} elseif ( ( $plain_key = get_post_meta( $post_id, $key, true ) ) && 'default' != $plain_key ) {
						if ( $prop == 'color' || stripos( $prop, 'color' ) ) {
							$css[$selector][$prop] = $prop . ': #' . $plain_key;
						}
						elseif ( $prop == 'background-image' && 'default' != $plain_key ) {
							$css[$selector][$prop] = $prop .': url(' . $plain_key . ')';
						}
						elseif ( $prop == 'background-repeat' && 'fullcover' == $plain_key ) {
							if ( isset( $val['dependson'] ) ) {
								if ( $val['dependson']['prop'] == 'background-image' && ( 'default' != get_post_meta( $post_id, $val['dependson']['key'], true ) ) ) {
									$css[$selector]['background-size'] = 'background-size: cover';
								}
							} else {
								$css[$selector]['background-size'] = 'background-size: cover';
							}
						}
						elseif ( $prop == 'font-family' ) {
							$font = $plain_key;
							$css[$selector][$prop] = $prop .': '. $font;
							if ( ! in_array( $font, themify_get_web_safe_font_list( true ) ) ) {
								$themify->google_fonts .= str_replace( ' ', '+', $font.'|' );
							}
						}
						else {
							$css[$selector][$prop] = $prop .': '. $plain_key;
						}
					}
				}
				if ( ! empty( $css[$selector] ) ) {
					$style .= "$selector {\n\t" . implode( ";\n\t", $css[$selector] ) . "\n}\n";
				}
			}

			if ( '' != $style ) {
				echo "\n<!-- Entry Style -->\n<style>\n$style</style>\n<!-- End Entry Style -->\n";
			}
		}
	}
	add_action( 'wp_head', 'themify_theme_custom_post_css', 77 );
}

if ( ! function_exists( 'themify_theme_featured_area_style' ) ) {
	/**
	 * Returns the background repeat style as a class.
	 *
	 * @return mixed|string
	 */
	function themify_theme_featured_area_style() {
		return themify_check( 'background_repeat' ) ? themify_get( 'background_repeat' ) : '';
	}
}

/**
 * Adds page loading animation
 *
 * @since 1.0.0
 */
function themify_theme_add_split_loader() {
	if ( themify_theme_has_page_loader() ) :
            $color = themify_get('setting-page_loader_color');
            $icon = themify_get('setting-page_loader_icon');
            $cl = $bg = '';
            if($icon){
                if(strpos($icon,'fa-')===0){
                    $cl = ' fa '.$icon;
                }
                else{
                    $bg = 'background:url('.$icon.') center/cover no-repeat';
                }
            }
	?>
        <?php if($color):?>
            <style type="text/css">
                .split-panel,.split-loader{
                    background-color:#<?php echo $color?>;
                }
            </style>
        <?php endif;?>
        <div class="split-loader">
            <div <?php echo $bg?'style="'.$bg.'"':'';?> class="split-spinner<?php echo $cl?>"></div>
        </div>
	<?php
	endif;
}

/**
 * Hook split loader to builder layout and layout part single page.
 * @since 1.1.7
 */
function themify_theme_split_loader_in_builder_layout_page() {
	if ( is_singular( array( 'tbuilder_layout', 'tbuilder_layout_part' ) ) ) {
		themify_theme_add_split_loader();
	}
}

/**
 * Checks if current page has split scroll.
 *
 * @since 1.0.0
 *
 * @return bool
 */
function themify_theme_has_split_scroll() {
	return apply_filters( 'themify_theme_has_split_scroll', ( is_search() || !is_page() || themify_is_touch( 'phone' ) || ( isset( $_REQUEST['wp_customize'] ) && 'on' == $_REQUEST['wp_customize'] ) || ( is_admin() && 'customize.php' == basename( $_SERVER['PHP_SELF'] ) ) ) ? false : is_page() && 'yes' == themify_get( 'split_scroll' ) );
}

/**
 * Loads scripts in certain admin screens.
 *
 * @since 1.0.0
 */
function themify_theme_admin_enqueue_scripts() {
	$screen = get_current_screen();
	if ( 'page' == $screen->post_type ) {
		wp_enqueue_script( 'themify-theme-custom-panel', THEME_URI . '/js/themify-custom-panel.js', array( 'jquery' ) );
	}
}

/**
 * Get featured image to use in JavaScript to build header.
 *
 * @since 1.0.0
 *
 * @return string
 */
function themify_theme_get_featured_image() {
	global $post;
	$image_url = '';
	setup_postdata( $post );
	$image = themify_get_image( 'w=1440&h=452' );
	wp_reset_postdata();
	if ( ! empty( $image ) ) {
		$doc = new DOMDocument();
		$doc->loadHTML( $image );
		$img = $doc->getElementsByTagName('img');
		foreach ( $img as $tag ) {
			$image_url = $tag->getAttribute( 'src' );
		}
	}
	return apply_filters( 'themify_theme_get_featured_image', $image_url );
}

/**
 * Checks if current page has page loader effect.
 *
 * @since 1.0.0
 *
 * @return bool
 */
function themify_theme_has_page_loader() {
	if ( themify_theme_has_split_scroll() ) {
		return true;
	}
	return 'on' != themify_get( 'setting-page_loader_disabled' );
}

/**********************
 * Plugin Integration *
 **********************/
/** Compatibility with portfolio posts plugin */
define( 'THEMIFY_PORTFOLIO_POSTS_COMPAT_MODE', true );

/* load the TGMPA library */
if ( is_admin() ) {
	require_once THEMIFY_DIR . '/class-tgm-plugin-activation.php';
}

/**
 * Register plugins required for the theme
 *
 * @since 1.0.0
 */
function themify_theme_register_required_plugins() {
	$plugins = array(
        array(
            'name'               => __( 'Themify Portfolio Posts', 'themify' ),
            'slug'               => 'themify-portfolio-post',
            'source'             => 'https://themify.me/files/themify-portfolio-post/themify-portfolio-post.zip',
            'required'           => true,
            'version'            => '1.0.0',
            'force_activation'   => false,
            'force_deactivation' => false,
        ),
    );
    $config = array(
        'default_path' => '',                      // Default absolute path to pre-packaged plugins.
        'menu'         => 'themify-install-plugins', // Menu slug.
        'has_notices'  => true,                    // Show admin notices or not.
        'dismissable'  => true,                    // If false, a user cannot dismiss the nag message.
        'dismiss_msg'  => '',                      // If 'dismissable' is false, this message will be output at top of nag.
        'is_automatic' => false,                   // Automatically activate plugins after installation or not.
        'message'      => '',                      // Message to output right before the plugins table.
        'strings'      => array(
            'page_title'                      => __( 'Install Required Plugins', 'themify' ),
            'menu_title'                      => __( 'Install Plugins', 'themify' ),
            'installing'                      => __( 'Installing Plugin: %s', 'themify' ), // %s = plugin name.
            'oops'                            => __( 'Something went wrong with the plugin API.', 'themify' ),
            'notice_can_install_required'     => _n_noop( 'This theme requires the following plugin: %1$s.', 'This theme requires the following plugins: %1$s.', 'themify' ), // %1$s = plugin name(s).
            'notice_can_install_recommended'  => _n_noop( 'This theme recommends the following plugin: %1$s.', 'This theme recommends the following plugins: %1$s.', 'themify' ), // %1$s = plugin name(s).
            'notice_cannot_install'           => _n_noop( 'Sorry, but you do not have the correct permissions to install the %s plugin. Contact the administrator of this site for help on getting the plugin installed.', 'Sorry, but you do not have the correct permissions to install the %s plugins. Contact the administrator of this site for help on getting the plugins installed.', 'themify' ), // %1$s = plugin name(s).
            'notice_can_activate_required'    => _n_noop( 'The following required plugin is currently inactive: %1$s.', 'The following required plugins are currently inactive: %1$s.', 'themify' ), // %1$s = plugin name(s).
            'notice_can_activate_recommended' => _n_noop( 'The following recommended plugin is currently inactive: %1$s.', 'The following recommended plugins are currently inactive: %1$s.', 'themify' ), // %1$s = plugin name(s).
            'notice_cannot_activate'          => _n_noop( 'Sorry, but you do not have the correct permissions to activate the %s plugin. Contact the administrator of this site for help on getting the plugin activated.', 'Sorry, but you do not have the correct permissions to activate the %s plugins. Contact the administrator of this site for help on getting the plugins activated.', 'themify' ), // %1$s = plugin name(s).
            'notice_ask_to_update'            => _n_noop( 'The following plugin needs to be updated to its latest version to ensure maximum compatibility with this theme: %1$s.', 'The following plugins need to be updated to their latest version to ensure maximum compatibility with this theme: %1$s.', 'themify' ), // %1$s = plugin name(s).
            'notice_cannot_update'            => _n_noop( 'Sorry, but you do not have the correct permissions to update the %s plugin. Contact the administrator of this site for help on getting the plugin updated.', 'Sorry, but you do not have the correct permissions to update the %s plugins. Contact the administrator of this site for help on getting the plugins updated.', 'themify' ), // %1$s = plugin name(s).
            'install_link'                    => is_multisite() ? _n_noop( '', '', 'themify' ) : _n_noop( 'Begin installing plugin', 'Begin installing plugins', 'themify' ),
            'activate_link'                   => _n_noop( 'Begin activating plugin', 'Begin activating plugins', 'themify' ),
            'return'                          => __( 'Return to Required Plugins Installer', 'themify' ),
            'plugin_activated'                => __( 'Plugin activated successfully.', 'themify' ),
            'complete'                        => __( 'All plugins installed and activated successfully. %s', 'themify' ), // %s = dashboard link.
            'nag_type'                        => 'updated' // Determines admin notice type - can only be 'updated', 'update-nag' or 'error'.
        )
    );

    tgmpa( $plugins, $config );
	add_action( 'admin_menu', 'themify_theme_required_plugins_admin_menu', 11 );
}
add_action( 'tgmpa_register', 'themify_theme_register_required_plugins' );

/**
 * Relocate the tgmpa admin menu under Themify
 *
 * @since 1.0.0
 */
function themify_theme_required_plugins_admin_menu() {
	// Make sure privileges are correct to see the page
	if ( ! current_user_can( 'install_plugins' ) ) {
		return;
	}

	TGM_Plugin_Activation::get_instance()->populate_file_path();

	foreach ( TGM_Plugin_Activation::get_instance()->plugins as $plugin ) {
		if ( ! is_plugin_active( $plugin['file_path'] ) ) {
			add_submenu_page( 'themify', __( 'Install Plugins', 'themify' ), __( 'Install Plugins', 'themify' ), 'manage_options', 'themify-install-plugins', array( TGM_Plugin_Activation::get_instance(), 'install_plugins_page' ) );
			break;
		}
	}
}

/**
 * Fix issue with tgmpa and WP multisite
 *
 * @since 1.0.0
 */
function themify_theme_tgmpa_mu_fix( $links ) {
	if ( is_multisite() ) {
		$links['install'] = __( 'Auto plugin installation is not support in WordPress multisite. To install this plugin: go to Network Admin > Plugins > Add New (the plugin zip is included in the theme folder > plugins > folder).', 'themify' );
	}

	return $links;
}
add_filter( 'tgmpa_notice_action_links', 'themify_theme_tgmpa_mu_fix' );

/**
 * Hide plugin activation link on WP Multisite
 *
 * @since 1.0.0
 */
function themify_theme_tgmpa_mu_hide_activate_link() {
	global $hook_suffix;

	if ( is_multisite() && 'appearance_page_themify-install-plugins' == $hook_suffix ) {
		echo '<style>.plugins .row-actions { display: none !important; }</style>';
	}
}
add_filter( 'admin_head', 'themify_theme_tgmpa_mu_hide_activate_link' );

/**
 * Set portfolio post type slug
 *
 * @since 1.0.0
 *
 * @return string
 */
function themify_theme_portfolio_post_rewrite( $id ) {
	$slug = themify_get( 'themify_portfolio_slug' );
	return empty( $slug ) ? apply_filters( 'themify_portfolio_rewrite', 'project' ) : $slug;
}
add_filter( 'themify_portfolio_post_rewrite', 'themify_theme_portfolio_post_rewrite' );

if ( ! function_exists( 'themify_theme_entry_title_tag' ) ) {
	/**
	 * Displays the entry title tag, outputting h1 for singular views and h2 otherwise.
	 *
	 * @since 1.0.0
	 *
	 * @return string
	 */
	function themify_theme_entry_title_tag() {
		global $themify;
		if ( is_singular() ) {
			if ( isset( $themify->is_shortcode ) ) {
				$tag = 'h2';
			} else {
				$tag = 'h1';
			}
		} else {
			$tag = 'h2';
		}

		echo apply_filters( 'themify_entry_title_tag', $tag );
	}
}

/**
 * Handle Builder's JavaScript fullwidth rows, forces fullwidth rows if sidebar is disabled
 *
 * @return bool
 */
function themify_theme_fullwidth_layout_condition( $support ) {
	global $themify;

	/* if Content Width option is set to Fullwidth, do not use JavaScript */
	if( themify_theme_has_split_scroll() || themify_get( 'content_width' ) == 'full_width' ) {
		return true;
	}

	/* using sidebar-none layout, force fullwidth rows using JavaScript */
	if( $themify->layout == 'sidebar-none' ) {
		return false;
	}

	return true;
}
add_filter( 'themify_builder_fullwidth_layout_support', 'themify_theme_fullwidth_layout_condition', 20 );

/**
 * Disable SplitScroll effect on IE due to rendering issues
 *
 * @return bool
 */
function themify_theme_disable_split_on_ie( $enabled ){
	global $is_IE;
	if( $is_IE ) {
		if( $enabled ) {
			add_filter( 'body_class', 'themify_theme_split_ie_body_class' );
		}
		return false;
	}
	return $enabled;
}
add_filter( 'themify_theme_has_split_scroll', 'themify_theme_disable_split_on_ie' );

function themify_theme_split_ie_body_class( $classes ) {
	$classes[] = 'split-ie';
	return $classes;
}
