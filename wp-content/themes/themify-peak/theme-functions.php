<?php
/* * *************************************************************************
 *  					Theme Functions
 * 	----------------------------------------------------------------------
 * 						DO NOT EDIT THIS FILE
 * 	----------------------------------------------------------------------
 * 
 *  					Copyright (C) Themify
 * 						http://themify.me
 *
 *  To add custom PHP functions to the theme, create a new 'custom-functions.php' file in the theme folder.
 *  They will be added to the theme automatically.
 * 
 * ************************************************************************* */

/////// Actions ////////
// Init post, page and additional post types if they exist
add_action('after_setup_theme', 'themify_theme_after_setup_theme');

// Enqueue scripts and styles required by theme
add_action('wp_enqueue_scripts', 'themify_theme_enqueue_scripts', 12);

// Browser compatibility
add_action('wp_head', 'themify_viewport_tag');

if (themify_get('setting-disable_responsive_design') == 'on') {
    add_action('init', 'themify_disable_responsive_design');
}

// Register custom menu
add_action('init', 'themify_register_custom_nav');

// Register sidebars
add_action('widgets_init', 'themify_theme_register_sidebars');

/////// Filters ////////

/**
 * Enqueue Stylesheets and Scripts
 * @since 1.0.0
 */
function themify_theme_enqueue_scripts() {


    // Get theme version for Themify theme scripts and styles
	global $themify;
    $theme_version = wp_get_theme()->display('Version');
    $is_touch = themify_is_touch();
    $is_mobile = themify_is_touch('phone');
    $dependce = array('jquery','infinitescroll','themify-isotope','themify-smartresize');
    ///////////////////
    // Enqueue styles
    ///////////////////
    // Themify base styling
    wp_enqueue_style('theme-style', get_stylesheet_uri(), array(), $theme_version);

    // Themify Media Queries CSS
    wp_enqueue_style('themify-media-queries', THEME_URI . '/media-queries.css', array(), $theme_version);

    // Themify WooCommerce CSS
    if (themify_is_woocommerce_active()) {
        wp_enqueue_style('themify-woocommerce', THEME_URI . '/styles/woocommerce.css');
    }

    // Themify Icons
    wp_enqueue_style('themify-icons', THEMIFY_URI . '/themify-icons/themify-icons.css', array(), THEMIFY_VERSION);

    // User stylesheet
    if (is_file(TEMPLATEPATH . '/custom_style.css')) {
        wp_enqueue_style('custom-style', THEME_URI . '/custom_style.css');
    }

    // Google Web Fonts embedding
    wp_enqueue_style('google-fonts', themify_https_esc('http://fonts.googleapis.com/css') . '?family=Yantramanav:400,300,500,700|Suranna');

    ///////////////////
    // Enqueue scripts
    ///////////////////

    wp_enqueue_script('themify-smartresize', THEME_URI . '/js/jquery.smartresize.js', array('jquery'), $theme_version, true);

    // Slide mobile navigation menu
    wp_enqueue_script('slide-nav', THEMIFY_URI . '/js/themify.sidemenu.js', array('jquery'), THEMIFY_VERSION, true);


    // Isotop layout
    wp_enqueue_script('themify-isotope', THEME_URI . '/js/jquery.isotope.min.js', array(), $theme_version, true);

    wp_enqueue_script('themify-backstretch', THEMIFY_URI . '/js/backstretch.js', array('jquery'), $theme_version, true);

    // Infinite scroll
    wp_enqueue_script('infinitescroll', THEME_URI . '/js/jquery.infinitescroll.min.js', array('jquery'), $theme_version, true);
    if ($themify->post_layout_type === 'slider' && is_single()) {
        wp_enqueue_script('themify_slider', THEME_URI . '/js/jquery.flexslider-min.js', array('jquery'), $theme_version, true);
        $dependce[] = 'themify_slider';
    }
    if(!$is_mobile){
        //Tiles
        wp_enqueue_script('tiles', THEME_URI . '/js/tiles.js', array('jquery'), $theme_version, true);
        wp_enqueue_script('themify_tiles', THEME_URI . '/js/themify-tiles.js', array('tiles'), $theme_version, true);
        $dependce[] = 'themify_tiles';
    }
    wp_register_script('theme-script', THEME_URI . '/js/themify.script.js', $dependce, $theme_version, true);

    global $wp_query;
    // Prepare JS variables
    $themify_script_vars = array(
        'lightbox' => themify_lightbox_vars_init(),
        'lightboxContext' => apply_filters('themify_lightbox_context', '#pagewrap'),
        'smallScreen' => 1001,
        // Mega Menu
        'menuInSidePanel' => false,
        'events' => $is_touch ? 'click' : 'mouseenter',
        // Like it
        'ajax_nonce' => wp_create_nonce('ajax_nonce'),
        'ajax_url' => admin_url('admin-ajax.php'),
        // slider
        'wrap' => 'yes',
        'play' => 'yes',
        'autoplay' => 5,
        'speed' => 500,
        // Infinite Scroll
        'loadingImg' => THEME_URI . '/images/loading.gif',
        'maxPages' => $wp_query->max_num_pages,
        'autoInfinite' => themify_check('setting-autoinfinite') ? 'no' : 'auto',
        'scrollToNewOnLoad' => 'scroll',
        'resetFilterOnLoad' => 'reset',
        // auto tiles
        'tiledata' => array(
            'grids' => array(
                "post" => $is_mobile?false:themify_set_tiles_template(),
                "mobile" => array("AA", "..")
            ),
            'default_grid' => 'post',
            'small_screen_grid' => 'mobile',
            'breakpoint' => 800,
            'padding' => 5,
            'full_width' => false,
            'animate_init' => false,
            'animate_resize' => true,
            'animate_template' => false
        )
    );
    wp_enqueue_script('themify_gallery', THEME_URI . '/js/themify.gallery.js', array('jquery'), $theme_version, true);
    // Pass variable values to JavaScript
    wp_localize_script('theme-script', 'themifyScript', apply_filters('themify_script_vars', $themify_script_vars));
    wp_enqueue_script('theme-script');
    // WordPress internal script to move the comment box to the right place when replying to a user
    if (is_single() || is_page())
        wp_enqueue_script('comment-reply');
}

if (is_admin()) {
    add_action('admin_enqueue_scripts', 'themify_admin_script_style');

    function themify_admin_script_style() {
        wp_enqueue_style('themify-admin-style', THEME_URI . '/admin/css/admin-style.css');
        wp_enqueue_script('themify-admin-script', THEME_URI . '/admin/js/admin-script.js');
    }

}

/**
 * Add viewport tag for responsive layouts
 * @since 1.0.0
 */
function themify_viewport_tag() {
    echo "\n" . '<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">' . "\n";
}

if (!function_exists('themify_theme_after_setup_theme')) {

    /**
     * Register theme support.
     *
     * Initialize custom panel with its definitions.
     * Custom panel definitions are located in admin/post-type-TYPE.php
     *
     * @since 1.0.7
     */
    function themify_theme_after_setup_theme() {
        // Enable WordPress feature image
        add_theme_support('post-thumbnails');

        // Load Themify Mega Menu
        require_once 'class-mega-menu.php';
        // Load required files for post, page and custom post types where it applies
        foreach (array('post', 'page', 'portfolio') as $type) {
            require_once( "admin/post-type-$type.php" );
        }

        /**
         * Navigation menus used in page custom panel to specify a custom menu for the page.
         * @since 1.0.0
         * @var array
         */
        $nav_menus = array(array('name' => '', 'value' => '', 'selected' => true));
        foreach (get_terms('nav_menu') as $menu) {
            $nav_menus[] = array('name' => $menu->name, 'value' => $menu->slug);
        }

        themify_build_write_panels(apply_filters('themify_theme_meta_boxes', array(
            array(
                'name' => __('Post Options', 'themify'),
                'id' => 'post-options',
                'options' => themify_theme_post_meta_box(),
                'pages' => 'post'
            ),
            array(
                'name' => __('Page Options', 'themify'),
                'id' => 'page-options',
                'options' => themify_theme_page_meta_box(array(
                    'nav_menus' => $nav_menus,
                )),
                'pages' => 'page'
            ),
            array(
                'name' => __('Post Appearance', 'themify'),
                'id' => 'post-appearance',
                'options' => themify_theme_post_appearance_meta_box(),
                'pages' => 'post'
            ),
            array(
                'name' => __('Page Appearance', 'themify'),
                'id' => 'page-appearance',
                'options' => themify_theme_page_appearance_meta_box(),
                'pages' => 'page'
            ),
            array(
                'name' => __('Query Posts', 'themify'),
                'id' => 'query-posts',
                'options' => themify_theme_query_post_meta_box(),
                'pages' => 'page'
            ),
            array(
                'name' => __('Portfolio Options', 'themify'),
                'id' => 'portfolio-options',
                'options' => themify_theme_portfolio_meta_box(array(
                    'nav_menus' => $nav_menus,
                )),
                'pages' => 'portfolio'
            ),
            array(
                'name' => __('Query Portfolios', 'themify'),
                'id' => 'query-portfolio',
                'options' => themify_theme_query_portfolio_meta_box(),
                'pages' => 'page'
            ),
                        )
        ));
    }

}

/**
 * Outputs classes based on certain user-specified parameters.
 *
 * @since 1.0.0
 */
function themify_theme_query_classes() {
    global $themify;
    $class = array();

    $class[] = $themify->layout;
    $class[] = $themify->post_layout;
    $is_tiled = $themify->post_layout === 'custom_tiles' || $themify->post_layout === 'auto_tiles';
    if (isset($themify->query_post_type) && !in_array($themify->query_post_type, array('post', 'page'))) {
        $class[] = $themify->query_post_type;
    }
    if ($is_tiled) {
        $class[] = 'tiled';
    }
    if (themify_is_query_page() || is_archive() || is_search() || is_tax() || is_home()) {

        if (!$is_tiled) {
            $temp_class = $themify->query_post_type === 'portfolio' ? (themify_check('portfolio_content_layout') ? themify_get('portfolio_content_layout') : themify_get('setting-portfolio_content_layout')) : themify_theme_get('post_content_layout');
            if ($temp_class) {
                $class[] = $temp_class;
            }
            if ('yes' === themify_theme_get('disable_masonry') && 'slider' !== $themify->post_layout) {
                $class[] = 'masonry';
            }
        }
        if (($themify->query_post_type==='portfolio' && (themify_get('portfolio_gutter') === 'no-gutter' || themify_get('setting-portfolio_gutter') === 'no-gutter')) || themify_theme_get('post_gutter') === 'no-gutter') {
            $class[] = 'no-gutter';
        }
        if ($temp_class = themify_theme_get('more_posts', 'infinite')) {
            if ('slider' !== $themify->post_layout) {
                $class[] = $temp_class;
            }
        }
    }

    return implode(' ', apply_filters('themify_theme_loops_wrapper_class', $class));
}

/**
 * Function that checks if meta data exists and retrieves it, otherwise checks theme setting and retrieves it instead.
 * If it still doesn't exist, uses the default provided.
 * 
 * @since 1.0.0
 * 
 * @param string $meta
 * @param string $default
 * @param string $theme_setting
 *
 * @return mixed
 */
function themify_theme_get($meta, $default = '', $theme_setting = '') {
    global $themify;
    $post_type = '';

    // If it's a singular view or a query page, try to get the post meta data first
    if (themify_is_query_page()) {
        // Let's check now prefixing with post type since it's a query post type page
        // Check without checking for custom post type
        $value = get_post_meta($themify->page_id, $meta, true);
        if ('' != $themify->query_post_type && 'post' != $themify->query_post_type) {
            $post_type = $themify->query_post_type . '_';
            $cpt_meta = $post_type . $meta;
            $value = get_post_meta($themify->page_id, $cpt_meta, true);
        } else {
            
        }
        if ($value && '' != $value && 'default' != $value) {
            return $value;
        }
    } elseif (is_singular()) {
        // Check first without checking for custom post type
        $value = get_post_meta(get_the_ID(), $meta, true);

        if ($value && '' != $value && 'default' != $value) {
            return $value;
        }
        // Let's check now prefixing with post type
        if (( 'post' != get_post_type() && 'page' != get_post_type())) {
            $post_type = get_post_type() . '_';
        }
        $cpt_meta = $post_type . $meta;
        $value = get_post_meta(get_the_ID(), $cpt_meta, true);
        if ($value && '' != $value && 'default' != $value) {
            return $value;
        }
    }

    // If there is no post meta data or is '' (default), prepare to fetch theme setting
    if (empty($theme_setting)) {
        if (themify_is_query_page() && '' != $themify->query_post_type && 'post' != $themify->query_post_type) {
            $post_type = $themify->query_post_type . '_';
        } elseif (is_singular() && ( 'post' != get_post_type() && 'page' != get_post_type() )) {
            $post_type = get_post_type() . '_';
        }
        $theme_setting = 'setting-' . $post_type . $meta;
    }

    // Check theme setting (if there's a special setting like for portfolios it will be checked)
    if (themify_check($theme_setting)) {
        return themify_get($theme_setting);
    }

    // Prepare to check non special setting stripping out the post type from setting key
    if ('post' != $post_type) {
        $theme_setting = str_replace($post_type, '', $theme_setting);
    }
    // Check regular setting (like portfolios that rely in default layouts setting)
    if (themify_check($theme_setting)) {
        return themify_get($theme_setting);
    }
    // No luck so return default
    return $default;
}

if (!function_exists('themify_theme_body_class')) {

    /**
     * Adds body classes for special theme features.
     *
     * @param $classes
     *
     * @return array
     */
    function themify_theme_body_class($classes) {
        global $themify;
        //Single post Layout 
        if (is_single()) {
            $layout = $themify->post_layout_type;
            if (!$layout) {
                $layout = 'default';
            } elseif ($layout === 'split') {
                foreach ($classes as $key => $class) {
                    if (false !== stripos($class, 'sidebar')) {
                        unset($classes[$key]);
                    }
                }
                $classes[] = 'sidebar-none';
            }
            $classes[] = 'single-' . $layout . '-layout';
        } elseif ($themify->post_layout !== 'custom_tiles' && $themify->post_layout !== 'auto_tiles') {
            // Check if masonry is enabled
            $classes[] = themify_theme_is_masonry_enabled();
        }
        // Add transparent-header class to body if user selected it in custom panel
        if (( is_single() || is_page() ) && 'transparent' == themify_get('header_wrap')) {
            $classes[] = 'transparent-header';
        }
        // Header Design
        $header = themify_area_design('header');
        $classes[] = 'none' === $header ? 'header-none' : $header;
        // Check if user disabled drop caps
        $classes[] = themify_check('setting-disable_drop_cap') ? 'disable-drop-cap' : 'enable-drop-cap';

        if (!is_active_sidebar('slideout-widgets')) {
            $classes[] = 'slideout-widgets-empty';
        }
        $classes[] = themify_is_touch('phone') ? 'is_phone' : 'tile_enable';
        return $classes;
    }

    add_filter('body_class', 'themify_theme_body_class', 99);
}

/**
 * Checks if masonry is enabled in this query page or in the default index layout settings.
 *
 * @since 1.0.0
 *
 * @return string
 */
function themify_theme_is_masonry_enabled() {
    $do_masonry = '';
    $post_type = '';
    if (themify_is_query_page()) {
        global $themify;
        if (isset($themify->query_post_type) && !in_array($themify->query_post_type, array('post', 'page'))) {
            $post_type = $themify->query_post_type . '_';
        }
        $enable_masonry = themify_get($post_type . 'disable_masonry');
        if ('yes' == $enable_masonry) {
            $do_masonry = 'masonry-enabled';
        } elseif ('default' == $enable_masonry || '' == $enable_masonry) {
            if ('no' != themify_get('setting-' . $post_type . 'disable_masonry')) {
                $do_masonry = 'masonry-enabled';
            }
        }
    } else {
        if (!is_search()) {
            $post_type = in_array(get_post_type(), apply_filters('themify_post_type_uses_post_masonry_setting', array('post', 'product'))) ? '' : get_post_type() . '_';
        }
        if ('no' != themify_get('setting-' . $post_type . 'disable_masonry')) {
            $do_masonry = 'masonry-enabled';
        }
    }
    return $do_masonry;
}

if (!function_exists('themify_register_custom_nav')) {

    /**
     * Register Custom Menu Function
     * @since 1.0.0
     */
    function themify_register_custom_nav() {
        register_nav_menus(array(
            'main-nav' => __('Main Navigation', 'themify'),
            'footer-nav' => __('Footer Navigation', 'themify'),
        ));
    }

}

/**
 * Checks liker's IP and saves it to the post if it's not already in likers list.
 * @since 2.2.6
 */
function themify_likeit() {
    check_ajax_referer('ajax_nonce', 'nonce');

    $post_id = $_POST['post_id'];

    $ip = $_SERVER['REMOTE_ADDR'];

    $current_likers = trim(get_post_meta($post_id, 'likers', true));

    if (isset($current_likers) && '' != $current_likers) {
        $current_likers_count = count(explode(',', $current_likers));
    } else {
        $current_likers_count = 0;
    }

    if (false === stripos($current_likers, $ip)) {
        if (isset($current_likers) && '' != $current_likers)
            $save_likers = $current_likers . ',' . $ip;
        else
            $save_likers = $ip;

        $update_result = update_post_meta($post_id, 'likers', $save_likers);
        update_post_meta($post_id, '_themify_likes_count', $current_likers_count + 1);

        if (is_multisite()) {
            $msblogid = get_post_meta($post_id, 'blogid', true);
            $mspostid = get_post_meta($post_id, 'postid', true);
            switch_to_blog($msblogid);
            update_post_meta($mspostid, 'likers', $save_likers);
            update_post_meta($mspostid, '_themify_likes_count', $current_likers_count + 1);
            restore_current_blog();
        }

        if ($update_result) {
            echo json_encode(array(
                'status' => 'new',
                'likers' => $current_likers_count + 1,
                'ip' => $ip
            ));
        } else {
            echo json_encode(array(
                'status' => 'failed',
                'ip' => $ip
            ));
        }
    } else {
        echo json_encode(array(
            'status' => 'isliker',
            'ip' => $ip
        ));
    }

    die();
}

add_action('wp_ajax_themify_likeit', 'themify_likeit');
add_action('wp_ajax_nopriv_themify_likeit', 'themify_likeit');

/**
 * Return number of likers or 0
 * @param bool $echo Whether to echo or just return
 * @return string
 * @since 2.2.6
 */
function themify_get_like($echo = true) {
    if ($current_likers = themify_get('_themify_likes_count')) {
        $count = $current_likers;
    } else {
        $count = '0';
    }
    if ($echo)
        echo $count;
    return $count;
}

if (!function_exists('themify_default_main_nav')) {

    /**
     * Default Main Nav Function
     * @since 1.0.0
     */
    function themify_default_main_nav() {
        echo '<ul id="main-nav" class="main-nav clearfix">';
        wp_list_pages('title_li=');
        echo '</ul>';
    }

}

if (!function_exists('themify_theme_menu_nav')) {

    /**
     * Sets custom menu selected in page custom panel as navigation, otherwise sets the default.
     *
     * @since 1.0.0
     */
    function themify_theme_menu_nav() {
        $args = array(
            'theme_location' => 'main-nav',
            'fallback_cb' => 'themify_default_main_nav',
            'container' => '',
            'menu_id' => 'main-nav',
            'menu_class' => 'main-nav'
        );
        // Get entry ID reliably
        $queried_object = get_queried_object();
        $entry_id = isset($queried_object->ID) ? $queried_object->ID : 0;

        // Compile menu arguments
        $args = wp_parse_args($args, array(
            'theme_location' => 'main-nav',
            'fallback_cb' => 'themify_default_main_nav',
            'container' => '',
            'menu_id' => 'main-nav',
            'menu_class' => 'main-nav'
        ));

        // See if the page has a menu assigned
        $custom_menu = get_post_meta($entry_id, 'custom_menu', true);
        if (!empty($custom_menu)) {
            $args['menu'] = $custom_menu;
        }

        // Render the menu
        wp_nav_menu($args);
    }

}

if (!function_exists('themify_theme_register_sidebars')) {

    /**
     * Register sidebars
     * @since 1.0.0
     */
    function themify_theme_register_sidebars() {
        $sidebars = array(
            array(
                'name' => __('Sidebar', 'themify'),
                'id' => 'sidebar-main',
                'before_widget' => '<div id="%1$s" class="widget %2$s">',
                'after_widget' => '</div>',
                'before_title' => '<h4 class="widgettitle">',
                'after_title' => '</h4>',
            ),
            array(
                'name' => __('Social Widget', 'themify'),
                'id' => 'social-widget',
                'before_widget' => '<div id="%1$s" class="widget %2$s">',
                'after_widget' => '</div>',
                'before_title' => '<strong>',
                'after_title' => '</strong>',
            ),
            array(
                'name' => __('Slideout Widgets', 'themify'),
                'id' => 'slideout-widgets',
                'before_widget' => '<div id="%1$s" class="widget %2$s">',
                'after_widget' => '</div>',
                'before_title' => '<h4 class="widgettitle">',
                'after_title' => '</h4>',
            )
        );
        foreach ($sidebars as $sidebar) {
            register_sidebar($sidebar);
        }

        // Footer Sidebars
        themify_register_grouped_widgets();
    }

}

if (!function_exists('_wp_render_title_tag')) {

    /**
     * Fallback to render title before WP 4.1
     *
     * @since 1.0.0
     */
    function themify_theme_render_title() {
        ?>
        <title><?php wp_title(); ?></title>
        <?php
    }

    // Fallback WP Title
    add_action('wp_head', 'themify_theme_render_title');
} else {
    // Add Title Tag support
    add_theme_support('title-tag');

    /**
     * Remove last part of title to keep the traditional Themify theme title.
     *
     * @since 1.0.0
     *
     * @param string $title
     *
     * @return string
     */
    function themify_theme_title_tag($title) {
        if (!is_front_page()) {
            $title = str_replace(get_bloginfo('name'), '', $title);
        }
        return $title;
    }

    // Generate title
    add_filter('wp_title', 'themify_theme_title_tag', 10);
}


/* * ********************
 * Plugin Integration *
 * ******************** */
/** Compatibility with portfolio posts plugin */
define('THEMIFY_PORTFOLIO_POSTS_COMPAT_MODE', true);

/* load the TGMPA library */
if (is_admin()) {
    require_once THEMIFY_DIR . '/class-tgm-plugin-activation.php';
}

/**
 * Register plugins required for the theme
 *
 * @since 1.0.0
 */
function themify_theme_register_required_plugins() {
    $plugins = array(
        array(
            'name' => __('Themify Portfolio Posts', 'themify'),
            'slug' => 'themify-portfolio-post',
            'source' => 'https://themify.me/files/themify-portfolio-post/themify-portfolio-post.zip',
            'required' => true,
            'version' => '1.0.0',
            'force_activation' => false,
            'force_deactivation' => false,
        ),
    );
    $config = array(
        'default_path' => '', // Default absolute path to pre-packaged plugins.
        'menu' => 'themify-install-plugins', // Menu slug.
        'has_notices' => true, // Show admin notices or not.
        'dismissable' => true, // If false, a user cannot dismiss the nag message.
        'dismiss_msg' => '', // If 'dismissable' is false, this message will be output at top of nag.
        'is_automatic' => false, // Automatically activate plugins after installation or not.
        'message' => '', // Message to output right before the plugins table.
        'strings' => array(
            'page_title' => __('Install Required Plugins', 'themify'),
            'menu_title' => __('Install Plugins', 'themify'),
            'installing' => __('Installing Plugin: %s', 'themify'), // %s = plugin name.
            'oops' => __('Something went wrong with the plugin API.', 'themify'),
            'notice_can_install_required' => _n_noop('This theme requires the following plugin: %1$s.', 'This theme requires the following plugins: %1$s.', 'themify'), // %1$s = plugin name(s).
            'notice_can_install_recommended' => _n_noop('This theme recommends the following plugin: %1$s.', 'This theme recommends the following plugins: %1$s.', 'themify'), // %1$s = plugin name(s).
            'notice_cannot_install' => _n_noop('Sorry, but you do not have the correct permissions to install the %s plugin. Contact the administrator of this site for help on getting the plugin installed.', 'Sorry, but you do not have the correct permissions to install the %s plugins. Contact the administrator of this site for help on getting the plugins installed.', 'themify'), // %1$s = plugin name(s).
            'notice_can_activate_required' => _n_noop('The following required plugin is currently inactive: %1$s.', 'The following required plugins are currently inactive: %1$s.', 'themify'), // %1$s = plugin name(s).
            'notice_can_activate_recommended' => _n_noop('The following recommended plugin is currently inactive: %1$s.', 'The following recommended plugins are currently inactive: %1$s.', 'themify'), // %1$s = plugin name(s).
            'notice_cannot_activate' => _n_noop('Sorry, but you do not have the correct permissions to activate the %s plugin. Contact the administrator of this site for help on getting the plugin activated.', 'Sorry, but you do not have the correct permissions to activate the %s plugins. Contact the administrator of this site for help on getting the plugins activated.', 'themify'), // %1$s = plugin name(s).
            'notice_ask_to_update' => _n_noop('The following plugin needs to be updated to its latest version to ensure maximum compatibility with this theme: %1$s.', 'The following plugins need to be updated to their latest version to ensure maximum compatibility with this theme: %1$s.', 'themify'), // %1$s = plugin name(s).
            'notice_cannot_update' => _n_noop('Sorry, but you do not have the correct permissions to update the %s plugin. Contact the administrator of this site for help on getting the plugin updated.', 'Sorry, but you do not have the correct permissions to update the %s plugins. Contact the administrator of this site for help on getting the plugins updated.', 'themify'), // %1$s = plugin name(s).
            'install_link' => is_multisite() ? _n_noop('', '', 'themify') : _n_noop('Begin installing plugin', 'Begin installing plugins', 'themify'),
            'activate_link' => _n_noop('Begin activating plugin', 'Begin activating plugins', 'themify'),
            'return' => __('Return to Required Plugins Installer', 'themify'),
            'plugin_activated' => __('Plugin activated successfully.', 'themify'),
            'complete' => __('All plugins installed and activated successfully. %s', 'themify'), // %s = dashboard link.
            'nag_type' => 'updated' // Determines admin notice type - can only be 'updated', 'update-nag' or 'error'.
        )
    );

    tgmpa($plugins, $config);
}

add_action('tgmpa_register', 'themify_theme_register_required_plugins');

/**
 * Relocate the tgmpa admin menu under Themify
 *
 * @since 1.0.0
 */
function themify_theme_required_plugins_admin_menu() {
    // Make sure privileges are correct to see the page
    if (!current_user_can('install_plugins')) {
        return;
    }

    TGM_Plugin_Activation::get_instance()->populate_file_path();

    foreach (TGM_Plugin_Activation::get_instance()->plugins as $plugin) {
        if (!is_plugin_active($plugin['file_path'])) {
            add_submenu_page('themify', __('Install Plugins', 'themify'), __('Install Plugins', 'themify'), 'manage_options', 'themify-install-plugins', array(TGM_Plugin_Activation::get_instance(), 'install_plugins_page'));
            break;
        }
    }
}

add_action('admin_menu', 'themify_theme_required_plugins_admin_menu', 11);

/**
 * Fix issue with tgmpa and WP multisite
 *
 * @since 1.0.0
 */
function themify_theme_tgmpa_mu_fix($links) {
    if (is_multisite()) {
        $links['install'] = __( 'Auto plugin installation is not support in WordPress multisite. To install this plugin: go to Network Admin > Plugins > Add New (the plugin zip is included in the theme folder > plugins > folder).', 'themify' );
    }

    return $links;
}

add_filter('tgmpa_notice_action_links', 'themify_theme_tgmpa_mu_fix');

/**
 * Hide plugin activation link on WP Multisite
 *
 * @since 1.0.0
 */
function themify_theme_tgmpa_mu_hide_activate_link() {
    global $hook_suffix;

    if (is_multisite() && 'appearance_page_themify-install-plugins' == $hook_suffix) {
        echo '<style>.plugins .row-actions { display: none !important; }</style>';
    }
}

add_filter('admin_head', 'themify_theme_tgmpa_mu_hide_activate_link');

/**
 * Set portfolio post type slug
 *
 * @since 1.0.0
 *
 * @return string
 */
function themify_theme_portfolio_post_rewrite($id) {
    $slug = themify_get('themify_portfolio_slug');
    return empty($slug) ? apply_filters('themify_portfolio_rewrite', 'project') : $slug;
}

add_filter('themify_portfolio_post_rewrite', 'themify_theme_portfolio_post_rewrite');


if (!function_exists('themify_theme_comment')) {

    /**
     * Custom Theme Comment
     * 
     * @since 1.0.0
     *
     * @param object $comment Current comment.
     * @param array $args Parameters for comment reply link.
     * @param int $depth Maximum comment nesting depth.
     */
    function themify_theme_comment($comment, $args, $depth) {
        $GLOBALS['comment'] = $comment;
        ?>

        <li id="comment-<?php comment_ID() ?>" <?php comment_class(); ?>>
            <p class="comment-author">
                <?php echo get_avatar($comment, $size = '48'); ?>
                <cite><?php echo get_comment_author_link(); ?></cite>
                <br />
                <small class="comment-time">
                    <?php comment_date(apply_filters('themify_comment_date', '')); ?>
                    @
                    <?php comment_time(apply_filters('themify_comment_time', '')); ?>
                    <?php edit_comment_link(__('Edit', 'themify'), ' [', ']'); ?>
                </small>
            </p>
            <div class="commententry">
                <?php if ($comment->comment_approved == '0') : ?>
                    <p><em><?php _e('Your comment is awaiting moderation.', 'themify') ?></em></p>
                <?php endif; ?>
                <?php comment_text(); ?>
            </div>
            <p class="reply">
                <?php comment_reply_link(array_merge($args, array('add_below' => 'comment', 'depth' => $depth, 'reply_text' => __('Reply', 'themify'), 'max_depth' => $args['max_depth']))) ?>
            </p>
            <?php
        }

    }

    add_action('edit_category_form_fields', 'themify_category_custom_fields');
    add_action('edit_category', 'themify_save_custom_fields');

    function themify_category_custom_fields($tag) {
        wp_enqueue_media();
        themify_enqueue_scripts('post.php');
        $category_meta = get_option('themify_category_bg');
        $post = get_posts(array('posts_per_page' => 1));
        $post = current($post);
        $img = isset($category_meta[$tag->term_id]) && isset($category_meta[$tag->term_id]['image']) && $category_meta[$tag->term_id]['image'];
        ?>
    <tr class="form-field">
        <th scope="row" valign="top"><label for="category-bg"><?php _e("Background", 'themify'); ?></label></th>
        <td>
            <div id="themify_builder_alert" class="alert"></div>
            <div class="themify_field_row clearfix  hide-if none">
                <div class="themify_field themify_field-color" style="width:auto;">
                    <span class="colorSelect"></span>
                    <input style="height: 33px;" type="text"  id="category-bg" name="category_meta[<?php echo $tag->term_id ?>][color]" value="<?php if (isset($category_meta[$tag->term_id])) esc_attr_e($category_meta[$tag->term_id]['color']); ?>"  class="themify_input_field colorSelectInput"/>
                    <input type="button" class="button clearColor" value="×"/>
                    &nbsp;&nbsp;<?php _e("image", 'themify'); ?>&nbsp;&nbsp;
                </div>
                <div class="themify_field" style="width:25%;margin-top: 7px;">
                    <div id="remove-themify_category_image" class="themify_featimg_remove <?php if (!$img): ?>hide<?php endif; ?>">
                        <a href="#"><?php _e("Remove image", 'themify'); ?></a>
                    </div>
                    <div class="themify_upload_preview"<?php if ($img): ?> style="display:block;"<?php endif; ?>>
                        <?php if ($img): ?>
                            <a href="<?php echo esc_url_raw($category_meta[$tag->term_id]['image']) ?>" target="_blank"> 
                                <img src="<?php echo esc_url_raw($category_meta[$tag->term_id]['image']) ?>" width="40" />
                            </a>
                        <?php endif; ?>
                    </div>
                    <input type="hidden" id="themify_category_image" name="category_meta[<?php echo $tag->term_id ?>][image]" value="<?php echo $img ? esc_url_raw($category_meta[$tag->term_id]['image']) : '' ?>" class="themify_input_field themify_upload_field" />
                    <div class="themify_upload_buttons">
                        <?php themify_uploader('themify_category_image', array('preview' => true, 'tomedia' => true, 'medialib' => true, 'type' => 'image', 'fields' => 'themify_category_image', 'topost' => $post->ID)); ?>
                    </div>
                </div>
            </div>
            <script type="text/javascript">
                jQuery(function ($) {
                    var $remove = $('#remove-themify_category_image');
                    $remove.find('a').on('click', function (e) {
                        e.preventDefault();
                        var $parent = $(this).parent().parent();
                        $parent.find('.themify_upload_field').val('');
                        $parent.find('.themify_upload_preview').fadeOut();
                        $remove.addClass('hide');
                    });
                });
            </script>
        </td>
    </tr>
    <?php
}

function themify_save_custom_fields() {

    if (isset($_POST['category_meta'])) {
        $id = key($_POST['category_meta']);
        $category_meta = get_option('themify_category_bg');
        $category_meta[$id] = $_POST['category_meta'][$id];
        if (!update_option('themify_category_bg', $category_meta)) {
            add_option('themify_category_bg', $_POST['category_meta']);
        }
    }
}

if (!function_exists('themify_theme_custom_post_css')) {

    /**
     * Outputs custom post CSS at the end of a post
     * @since 1.0.0
     */
    function themify_theme_custom_post_css() {
        global $themify;
        if (!is_category() && in_array(get_post_type(), array('post', 'page'))) {
            $post_id = get_the_ID();
            $entry_id = is_page() ? '.page-id-' : '.postid-';
            $entry_id.= $post_id;
            $headerwrap = $entry_id . ' #headerwrap';
            $site_logo = $entry_id . ' #site-logo';
            $site_description = $entry_id . ' #site-description';
            $main_nav = $entry_id . ' #main-nav';
            $social_widget = $entry_id . ' .social-widget';
            $css = array();
            $style = '';
            $rules = array();

            if ('transparent' != themify_get('header_wrap')) {
                $rules = array(
                    $headerwrap => array(
                        array(
                            'prop' => 'background-color',
                            'key' => 'background_color'
                        ),
                        array(
                            'prop' => 'background-image',
                            'key' => 'background_image'
                        ),
                        array(
                            'prop' => 'background-repeat',
                            'key' => 'background_repeat',
                            'dependson' => array(
                                'prop' => 'background-image',
                                'key' => 'background_image'
                            ),
                        ),
                    ),
                    "$entry_id #site-logo span:after, $entry_id #headerwrap #searchform, $entry_id #main-nav .current_page_item a, $entry_id #main-nav .current-menu-item a" => array(
                        array(
                            'prop' => 'border-color',
                            'key' => 'headerwrap_text_color'
                        ),
                    ),
                );
            }

            $rules["$headerwrap, $site_logo, $site_description"] = array(
                array(
                    'prop' => 'color',
                    'key' => 'headerwrap_text_color'
                ),
            );

            $rules["$site_logo a, $site_description a, $social_widget a, $main_nav > li > a"] = array(
                array(
                    'prop' => 'color',
                    'key' => 'headerwrap_link_color'
                ),
            );

            if (is_singular(array('portfolio', 'event'))) {
                $rules['.postid-' . $post_id . ' .featured-area'] = array(
                    array('prop' => 'background-color',
                        'key' => 'featured_area_background_color'
                    ),
                    array('prop' => 'background-image',
                        'key' => 'featured_area_background_image'
                    ),
                    array('prop' => 'background-repeat',
                        'key' => 'featured_area_background_repeat',
                        'dependson' => array(
                            'prop' => 'background-image',
                            'key' => 'featured_area_background_image'
                        ),
                    ),
                );
                $rules['.postid-' . $post_id . ' .portfolio-post-wrap, .postid-' . $post_id . ' .portfolio-post-wrap .post-date'] = array(
                    array('prop' => 'color',
                        'key' => 'featured_area_text_color'
                    ),
                );
                $rules['.postid-' . $post_id . ' .portfolio-post-wrap a'] = array(
                    array('prop' => 'color',
                        'key' => 'featured_area_link_color'
                    ),
                );
            }

            foreach ($rules as $selector => $property) {
                foreach ($property as $val) {
                    $prop = $val['prop'];
                    $key = $val['key'];
                    if (is_array($key)) {
                        if ($prop == 'font-size' && themify_check($key[0])) {
                            $css[$selector][$prop] = $prop . ': ' . themify_get($key[0]) . themify_get($key[1]);
                        }
                    } elseif (themify_check($key) && 'default' != themify_get($key)) {
                        if ($prop == 'color' || stripos($prop, 'color')) {
                            $css[$selector][$prop] = $prop . ': #' . themify_get($key);
                        } elseif ($prop == 'background-image' && 'default' != themify_get($key)) {
                            $css[$selector][$prop] = $prop . ': url(' . themify_get($key) . ')';
                        } elseif ($prop == 'background-repeat' && 'fullcover' == themify_get($key)) {
                            if (isset($val['dependson'])) {
                                if ($val['dependson']['prop'] == 'background-image' && ( themify_check($val['dependson']['key']) && 'default' != themify_get($val['dependson']['key']) )) {
                                    $css[$selector]['background-size'] = 'background-size: cover';
                                }
                            } else {
                                $css[$selector]['background-size'] = 'background-size: cover';
                            }
                        } elseif ($prop == 'font-family') {
                            $font = themify_get($key);
                            $css[$selector][$prop] = $prop . ': ' . $font;
                            if (!in_array($font, themify_get_web_safe_font_list(true))) {
                                $themify->google_fonts .= str_replace(' ', '+', $font . '|');
                            }
                        } else {
                            $css[$selector][$prop] = $prop . ': ' . themify_get($key);
                        }
                    }
                }
                if (!empty($css[$selector])) {
                    $style .= "$selector {\n\t" . implode(";\n\t", $css[$selector]) . "\n}\n";
                }
            }
            if (is_page()) {

                $img = themify_get('page_title_background_image');
                if ($img) {
                    $style.= '.page-category-title-wrap{background:url("' . esc_url($img) . '") no-repeat;background-size: cover;}';
                }
                $color = themify_get('page_title_background_color');
                if ($color) {
                    if($img){
                        $style.= '.category-title-overlay{background-color:#' . $color . ';}';
                    }
                    else{
                        $style.= '.category-title-overlay{background:none;}.page-category-title-wrap{background-color:#' . $color . ';}';
                    }
                }
            }
            if ('' != $style) {
                echo "\n<!-- Entry Style -->\n<style>\n$style</style>\n<!-- End Entry Style -->\n";
            }
        }
        elseif(is_category()){
                $categories = get_category(get_query_var('cat'));
                $category_id = $categories->cat_ID;
                $category_meta = get_option( 'themify_category_bg' );
                if(isset($category_meta[$category_id])){
                        $style = '';
                        if(isset($category_meta[$category_id]['image']) && $category_meta[$category_id]['image']){
                                $style = '.page-category-title-wrap{background:url("'.esc_url($category_meta[$category_id]['image']).'") no-repeat;background-size: cover;}';
                        }
                        if($category_meta[$category_id]['color'] && $category_meta[$category_id]['color']){
                                if($style){
                                        $style.= '.category-title-overlay{background-color:#'.$category_meta[$category_id]['color'].';}';
                                }
                                else{
                                        $style= '.category-title-overlay{background:none;}.page-category-title-wrap{background-color:#'.$category_meta[$category_id]['color'].';}';
                                }
                        }
                        if($style){
                                echo "\n<!-- Entry Style -->\n<style>\n$style</style>\n<!-- End Entry Style -->\n";
                        }
                }
        }
    }

    add_action('wp_head', 'themify_theme_custom_post_css', 77);
}

/**
 * Set the fixed-header selector for the scroll highlight script
 *
 * @since 1.1.3
 */
function themify_theme_scroll_highlight_vars($vars) {
    $vars['fixedHeaderSelector'] = '#headerwrap.fixed-header';
    return $vars;
}

add_filter('themify_builder_scroll_highlight_vars', 'themify_theme_scroll_highlight_vars');

if (!function_exists('themify_get_gallery_param_option')) {

    /**
     * Get gallery shortcode options
     * @param $shortcode
     * @param $param
     */
    function themify_get_gallery_param_option($shortcode, $param = 'link') {
        $pattern = '/\[gallery .*?(?=' . $param . ')' . $param . '=.([^\']+)./si';
        preg_match($pattern, $shortcode, $out);

        $out = isset($out[1]) ? explode('"', $out[1]) : array('');
        return $out[0];
    }

}
if (!function_exists('themify_get_images_from_gallery_shortcode')) {

    /**
     * Get images from gallery shortcode
     * @return object
     */
    function themify_get_images_from_gallery_shortcode($shortcode) {
        preg_match('/\[gallery.*ids=.(.*).\]/', $shortcode, $ids);
        $image_ids = explode(",", $ids[1]);
        $orderby = themify_get_gallery_param_option($shortcode, 'orderby');
        $orderby = $orderby != '' ? $orderby : 'post__in';
        $order = themify_get_gallery_param_option($shortcode, 'order');
        $order = $order != '' ? $order : 'ASC';

        // Check if post has more than one image in gallery
        return get_posts(array(
            'post__in' => $image_ids,
            'post_type' => 'attachment',
            'post_mime_type' => 'image',
            'numberposts' => -1,
            'orderby' => $orderby,
            'order' => $order
        ));
    }

}

function themify_is_img_php_disabled() {
    return themify_check('setting-img_settings_use');
}

if (!function_exists('themify_set_tiles_template')) {

    /**
     * Set template for auto tiled
     * @return array
     */
    function themify_set_tiles_template() {
        //Each elements must have unique char and length = 4. Otherwise the result can be unexpected. For example: can't be 1=>'AAAA' and 2=>'ABAB'
        // Reserved chars 'X', 'Y', 'Z', 'V', 'T', 'F', 'K' used in JS
        $knows_grids = array(1 => array("AAAA"),
            2 => array('BBCC', 'BBCC'),
            3 => array('DD..'),
            4 => array('.EEF', '.EEF')
        );
        if (!isset($knows_grids[5])) {
            $knows_grids[5] = $knows_grids[3];
            foreach ($knows_grids[2] as $v) {
                $knows_grids[5][] = $v;
            }
        }
        if (!isset($knows_grids[6])) {
            $knows_grids[6] = $knows_grids[4];
            foreach ($knows_grids[2] as $v) {
                $knows_grids[6][] = $v;
            }
        }
        if (!isset($knows_grids[7])) {
            $knows_grids[7] = $knows_grids[4];
            foreach ($knows_grids[3] as $v) {
                $knows_grids[7][] = $v;
            }
        }
        if (!isset($knows_grids[8])) {
            $knows_grids[8] = $knows_grids[7];
            foreach ($knows_grids[1] as $v) {
                $knows_grids[8][] = $v;
            }
        }
        if (!isset($knows_grids[9])) {
            $knows_grids[9] = $knows_grids[7];
            foreach ($knows_grids[2] as $v) {
                $knows_grids[9][] = $v;
            }
        }
        if (!isset($knows_grids[10])) {
            $knows_grids[10] = $knows_grids[7];
            $knows_grids[10][] = 'MMNN';
            $knows_grids[10][] = 'MMPP';
        }
        if (!isset($knows_grids[11])) {
            $knows_grids[11] = $knows_grids[10];
            foreach ($knows_grids[1] as $v) {
                $knows_grids[11][] = $v;
            }
        }
        if (!isset($knows_grids[12])) {
            $knows_grids[12] = $knows_grids[10];
            foreach ($knows_grids[2] as $v) {
                $knows_grids[12][] = $v;
            }
        }
        if (!isset($knows_grids[13])) {
            $knows_grids[13] = $knows_grids[10];
            $knows_grids[13][] = 'LSRR';
            $knows_grids[13][] = 'LSRR';
        }

        return apply_filters('themify_tiledata_template', $knows_grids);
    }

}
/**
 * Miltiply infinity scroll for shortcodes themify_list_posts,themify_portfolio_posts
 */
add_filter('themify_list_posts_shortcode_query_args', 'themify_infinity_shortcode', 10, 2);
add_filter('themify_portfolio_shortcode_args', 'themify_infinity_shortcode', 10, 2);
add_action('wp_ajax_themify_shortcode_infinity', 'themify_shortcode_infinity');
add_action('wp_ajax_nopriv_themify_shortcode_infinity', 'themify_shortcode_infinity');
if (!function_exists('themify_infinity_shortcode')) {

    /**
     * Add infinite_scroll value in themify_list_posts shortcode
     * @return void
     */
    function themify_infinity_shortcode($query_args, $atts) {

        global $themify;
        $themify->infinity_query = $themify->infinity_count = false;
		
        if (isset($atts['load_more']) && $atts['load_more'] !== 'no' && (!defined('DOING_AJAX') || !DOING_AJAX)) {
            $args = $query_args;
            $args['fields'] = 'ids';
            $query = new WP_Query($args);
            $themify->infinity_count = $query->max_num_pages;
            foreach ($atts as $k => $v) {
                if ($v !== '') {
                    $themify->infinity_query[$k] = $v;
                }
            }
            wp_reset_postdata();
            add_filter('themify_get_shortcode_template', 'themify_add_shortcode_pagination', 10, 2);
        }
        $themify->is_isotop = isset($atts['post_filter']) && $atts['post_filter']!=='no';

        return $query_args;
    }

    function themify_add_shortcode_pagination($html) {
        global $themify;
        if ($themify->is_isotop && !isset($themify->shortcode_query_taxonomy)) {
            $themify->shortcode_query_taxonomy = 'category';
            ob_start();
            locate_template('includes/filter.php', true, false);
            $html = ob_get_contents() . $html;
            ob_end_clean();
        } else {
            $themify->shortcode_query_taxonomy = null;
        }
        if ($themify->infinity_count > 1) {
            ob_start();
            locate_template('includes/pagination.php', true, false);
            $html.= ob_get_contents();
            ob_end_clean();
        }
        return $html;
    }

    function themify_shortcode_infinity() {
        if (isset($_GET['query'])) {
            $query = $_GET['query'];
            if (isset($query['load_more']) && $query['load_more'] !== 'no') {
                $is_portfolio = isset($query['is_portfolio']);
                $shortcode = $is_portfolio ? '[themify_portfolio_posts ' : '[themify_list_posts ';
                foreach ($query as $k => $v) {
                    if ($v || "$v"==='0') {
                        if (is_array($v)) {
                            $v = implode(',', $v);
                        }
                        $shortcode.=' ' . $k . '="' . esc_attr($v) . '"';
                    }
                }
                if (isset($_GET['paging']) && $_GET['paging'] > 1) {
                    $page = intval($_GET['paging']);
                    $limit = isset($query['limit']) && $query['limit'] > 0 ? intval($query['limit']) : get_option('posts_per_page');
                    $offset = $limit * ($page - 1);
                    $shortcode.=' offset="' . $offset . '"';
                }
                $shortcode.=' ]';
                echo do_shortcode($shortcode);
            }
        }
        wp_die();
    }

}

/**
 * Add custom theme features to the shortcode generator
 *
 * @since 1.0.1
 */
function themify_theme_shortcodes( $list ) {
	// add custom post style
	$list['list_posts']['fields'][0]['values'][] = array( 'value' => 'auto_tiles', 'text' => __( 'Auto Tiles', 'themify' ) );
	$list['list_posts']['fields'][0]['values'][] = array( 'value' => 'custom_tiles', 'text' => __( 'Custom Tiles', 'themify' ) );

	$list_posts_fields = array(
		array(
			'name' => 'display_style',
			'type' => 'listbox',
			'values' => array(
				array( 'value' => '', 'text' => __( 'Default', 'themify' ) ),
				array( 'value' => 'polaroid', 'text' => __( 'Polaroid', 'themify' ) ),
				array( 'value' => 'overlay', 'text' => __( 'Overlay', 'themify' ) ),
			),
			'label' => __( 'Layout Style', 'themify' ),
		),
		array(
			'name' => 'masonry',
			'type' => 'listbox',
			'values' => array(
				array( 'value' => '', 'text' => __( 'Disabled', 'themify' ) ),
				array( 'value' => 'masonry', 'text' => __( 'Enabled', 'themify' ) ),
			),
			'label' => __( 'Enable masonry layout', 'themify' ),
		),
		array(
			'name' => 'gutter',
			'type' => 'listbox',
			'values' => array(
				array( 'value' => '', 'text' => __( 'Default', 'themify' ) ),
				array( 'value' => 'no-gutter', 'text' => __( 'No Gutter', 'themify' ) ),
			),
			'label' => __( 'Grid gutter', 'themify' ),
		),
	);
	$list['list_posts']['fields'] = array_merge( $list['list_posts']['fields'], $list_posts_fields );
	$list['list_posts']['template'] = '[themify_list_posts<# if ( data.limit ) { #> limit="{{data.limit}}"<# } #><# if ( data.category ) { #> category="{{data.category}}"<# } #><# if ( data.image ) { #> image="{{data.image}}"<# } #><# if ( data.image_w ) { #> image_w="{{data.image_w}}"<# } #><# if ( data.image_h ) { #> image_h="{{data.image_h}}"<# } #><# if ( data.title ) { #> title="{{data.title}}"<# } #><# if ( data.post_meta ) { #> post_meta="{{data.post_meta}}"<# } #><# if ( data.display ) { #> display="{{data.display}}"<# } #><# if ( data.more_text ) { #> more_text="{{data.more_text}}"<# } #><# if ( data.post_date ) { #> post_date="{{data.post_date}}"<# } #><# if ( data.style = [ data.style, data.display_style, data.masonry, data.gutter ].filter( Boolean ).join( " " ) ) { #> style="{{data.style}}"<# } #><# if ( data.image_size ) { #> image_size="{{data.image_size}}"<# } #><# if ( data.order ) { #> order="{{data.order}}"<# } #><# if ( data.orderby ) { #> orderby="{{data.orderby}}"<# } #>]';

	return $list;
}
add_filter( 'themify_shortcodes', 'themify_theme_shortcodes' );