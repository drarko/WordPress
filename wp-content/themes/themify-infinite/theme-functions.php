<?php
/***************************************************************************
 *  					Theme Functions
 * 	----------------------------------------------------------------------
 * 						DO NOT EDIT THIS FILE
 *	----------------------------------------------------------------------
 *
 *  					Copyright (C) Themify
 * 						http://themify.me
 *
 *  To add custom PHP functions to the theme, create a new 'custom-functions.php' file in the theme folder.
 *  They will be added to the theme automatically.
 *
 ***************************************************************************/

/////// Actions ////////
// Init post, page and additional post types if they exist
add_action( 'after_setup_theme', 'themify_theme_after_setup_theme' );

// Enqueue scripts and styles required by theme
add_action( 'wp_enqueue_scripts', 'themify_theme_enqueue_scripts', 11 );

// Browser compatibility
add_action( 'wp_head', 'themify_viewport_tag' );

// Register custom menu
add_action( 'init', 'themify_register_custom_nav' );

// Register sidebars
add_action( 'widgets_init', 'themify_theme_register_sidebars' );

// Add theme specific classes in body tag
add_filter( 'themify_body_classes', 'themify_theme_body_class' );

// Add theme specific classes in post
add_filter( 'post_class', 'themify_theme_post_class' );

// Output JS template for archive ad code.
add_action( 'wp_footer', 'themify_theme_ad_code_js_template' );

/////// Filters ////////

/**
 * Enqueue Stylesheets and Scripts
 * @since 1.0.0
 */
function themify_theme_enqueue_scripts(){
	// Get theme version for Themify theme scripts and styles
	$theme_version = wp_get_theme()->display( 'Version' );

	///////////////////
	// Enqueue styles
	///////////////////

	// Themify base styling
	wp_enqueue_style( 'theme-style', get_stylesheet_uri(), array(), $theme_version);

	// Themify Media Queries CSS
	wp_enqueue_style( 'themify-media-queries', THEME_URI . '/media-queries.css', array(), $theme_version);

	// User stylesheet
	if ( is_file( TEMPLATEPATH . '/custom_style.css' ) ) {
		wp_enqueue_style( 'custom-style', THEME_URI . '/custom_style.css' );
	}

	// Google Web Fonts embedding
	wp_enqueue_style( 'google-fonts', themify_https_esc( 'http://fonts.googleapis.com/css' ). '?family=Playfair+Display:400,700,700italic,900|Source+Sans+Pro:400,300,600,700|Lora:400,400italic,700,700italic&subset=latin,latin-ext' );

	///////////////////
	// Enqueue scripts
	///////////////////

	// Slide mobile navigation menu
	wp_enqueue_script( 'slide-nav', THEMIFY_URI . '/js/themify.sidemenu.js', array( 'jquery' ), THEMIFY_VERSION, true );

	// Masonry layout
	wp_enqueue_script( 'themify-isotope', THEME_URI . '/js/jquery.isotope.min.js', array(), $theme_version, true );

	if ( is_home() || is_archive() || themify_is_query_page() || is_search() ) {
		// Infinite scroll
		wp_enqueue_script( 'infinitescroll', THEME_URI . '/js/jquery.infinitescroll.min.js', array('jquery'), false, true );
	}

	// Themify internal scripts
	wp_enqueue_script( 'theme-script',	THEME_URI . '/js/themify.script.js', array( 'wp-util' ), $theme_version, true );

	global $wp_query;

	// Prepare JS variables
	$themify_script_vars = array(
		'lightbox' => themify_lightbox_vars_init(),
		'lightboxContext' => apply_filters( 'themify_lightbox_context', '#pagewrap' ),
		// Used to put menu into side panel
		'smallScreen' => 1000,
		// Common for AJAX requests
		'ajax_nonce' => wp_create_nonce('ajax_nonce'),
		'ajax_url' => admin_url( 'admin-ajax.php' ),
		// Mega Menu
		'events' => themify_is_touch() ? 'click' : 'mouseenter',
		'menuInSidePanel' => false,
		// Infinite scroll
		'loadingImg'   	=> THEME_URI . '/images/loading.gif',
		'maxPages'	   	=> $wp_query->max_num_pages,
		'autoInfinite' 	=> themify_check( 'setting-single_autoinfinite' ) ? 'no': 'auto',
		'archive_ad'	=> array(
			'ad_code'		=> themify_get( 'setting-ad_code' ),
			'ad_code_cycle' => themify_get( 'setting-ad_code_cycle' ),
		),
		'back_top' => '<a class="infinite-back-top" href="#header"><span>' . esc_html__( 'Back to top', 'themify' ) . '</span></a>',
		// Packery
		'scrollToNewOnLoad' => 'noscroll',
		'resetFilterOnLoad' => 'reset',
		// Sticky Social Share Icons
		'stickyShare' => array(
			'screenThreshold' => 1400,
			'leftConstant' => 115,
		),
		// Sticky Sidebar
		'stickySidebar' => array(
			'screenThreshold' => 760,
			'widthPercent' => 26,
			'topPadding' => 152,
		),
	);

	// Pass variable values to JavaScript
	wp_localize_script( 'theme-script', 'themifyScript', apply_filters( 'themify_script_vars', $themify_script_vars ) );

	// WordPress internal script to move the comment box to the right place when replying to a user
	if ( is_single() || is_page() ) wp_enqueue_script( 'comment-reply' );
}

/**
 * Add viewport tag for responsive layouts
 * @since 1.0.0
 */
function themify_viewport_tag() {
	echo "\n".'<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">'."\n";
}

if ( ! function_exists( 'themify_theme_after_setup_theme' ) ) {
	/**
	 * Register theme support.
	 *
	 * Initialize custom panel with its definitions.
	 * Custom panel definitions are located in admin/post-type-TYPE.php
	 *
	 * @since 1.0.7
	 */
	function themify_theme_after_setup_theme() {
		// Enable WordPress feature image
		add_theme_support( 'post-thumbnails' );

		// Load Themify Mega Menu
		require_once 'class-mega-menu.php';

		// Load Themify Single Infinite
		require_once 'class-single-infinite.php';

		// Load Themify Social Share
		require_once 'class-social-share.php';

		// Load required files for post, page and custom post types where it applies
		foreach ( array( 'post', 'page', 'product' ) as $type ) {
			require_once "admin/post-type-$type.php";
		}
		/**
		 * Navigation menus used in page custom panel to specify a custom menu for the page.
		 * @since 1.0.0
		 * @var array
		 */
		$nav_menus = array(	array( 'name' => '', 'value' => '', 'selected' => true ) );
		foreach ( get_terms( 'nav_menu' ) as $menu ) {
			$nav_menus[] = array( 'name' => $menu->name, 'value' => $menu->slug );
		}

		themify_build_write_panels( apply_filters( 'themify_theme_meta_boxes',
			array(
				array(
					'name'		=> __( 'Post Options', 'themify' ),
					'id'		=> 'post-options',
					'options'	=> themify_theme_post_meta_box(),
					'pages'		=> 'post'
				),
				array(
					'name'		=> __( 'Page Options', 'themify' ),
					'id'		=> 'page-options',
					'options'	=> themify_theme_page_meta_box( array(
						'nav_menus' => $nav_menus,
					) ),
					'pages'		=> 'page'
				),
				array(
					'name'		=> __( 'Query Posts', 'themify' ),
					'id'		=> 'query-posts',
					'options'	=> themify_theme_query_post_meta_box(),
					'pages'		=> 'page'
				),
			)
		));
	}
}

if ( ! function_exists( 'themify_register_custom_nav' ) ) {
	/**
	 * Register Custom Menu Function
	 * @since 1.0.0
	 */
	function themify_register_custom_nav() {
		register_nav_menus( array(
			'main-nav' => __( 'Main Navigation', 'themify' ),
			'footer-nav' => __( 'Footer Navigation', 'themify' ),
		));
	}
}

if ( ! function_exists( 'themify_default_main_nav' ) ) {
	/**
	 * Default Main Nav Function
	 * @since 1.0.0
	 */
	function themify_default_main_nav() {
		echo '<ul id="main-nav" class="main-nav clearfix">';
			wp_list_pages( 'title_li=' );
		echo '</ul>';
	}
}

if ( ! function_exists( 'themify_theme_register_sidebars' ) ) {
	/**
	 * Register sidebars
	 * @since 1.0.0
	 */
	function themify_theme_register_sidebars() {
		$sidebars = array(
			array(
				'name'          => __( 'Sidebar', 'themify' ),
				'id'            => 'sidebar-main',
				'before_widget' => '<div id="%1$s" class="widget %2$s">',
				'after_widget'  => '</div>',
				'before_title'  => '<h4 class="widgettitle">',
				'after_title'   => '</h4>',
			),
			array(
				'name'          => __( 'Social Widget', 'themify' ),
				'id'            => 'social-widget',
				'before_widget' => '<div id="%1$s" class="widget %2$s">',
				'after_widget'  => '</div>',
				'before_title'  => '<strong>',
				'after_title'   => '</strong>',
			),
			array(
				'name'          => __( 'Slideout Widgets', 'themify' ),
				'id'            => 'slideout-widgets',
				'before_widget' => '<div id="%1$s" class="widget %2$s">',
				'after_widget'  => '</div>',
				'before_title'  => '<h4 class="widgettitle">',
				'after_title'   => '</h4>',
			),
		);
		foreach( $sidebars as $sidebar ) {
			register_sidebar( $sidebar );
		}

		// Footer Sidebars
		themify_register_grouped_widgets();
	}
}

if ( ! function_exists( '_wp_render_title_tag' ) ) {
	/**
	 * Fallback to render title before WP 4.1
	 *
	 * @since 1.0.0
	 */
	function themify_theme_render_title() { ?>
		<title><?php wp_title(); ?></title>
	<?php
	}
	// Fallback WP Title
	add_action( 'wp_head', 'themify_theme_render_title' );
} else {
	// Add Title Tag support
	add_theme_support( 'title-tag' );
	/**
	 * Remove last part of title to keep the traditional Themify theme title.
	 *
	 * @since 1.0.0
	 *
	 * @param string $title
	 *
	 * @return string
	 */
	function themify_theme_title_tag( $title ) {
		if ( ! is_front_page() ) {
			$title = str_replace( get_bloginfo( 'name' ), '', $title );
		}
		return $title;
	}
	// Generate title
	add_filter( 'wp_title', 'themify_theme_title_tag', 10 );
}

if ( ! function_exists( 'themify_theme_comment' ) ) {
	/**
	 * Custom Theme Comment
	 *
	 * @since 1.0.0
	 *
	 * @param object $comment Current comment.
	 * @param array $args Parameters for comment reply link.
	 * @param int $depth Maximum comment nesting depth.
	 */
	function themify_theme_comment($comment, $args, $depth) {
	   $GLOBALS['comment'] = $comment; ?>

		<li id="comment-<?php comment_ID() ?>">
			<p class="comment-author">
				<?php echo get_avatar( $comment, $size = '48' ); ?>
				<cite <?php comment_class(); ?>><span <?php comment_class(); ?>><?php echo get_comment_author_link(); ?></span></cite>
				<br />
				<small class="comment-time">
					<?php comment_date( apply_filters( 'themify_comment_date', '' ) ); ?>
					 @
					<?php comment_time( apply_filters( 'themify_comment_time', '' ) ); ?>
					<?php edit_comment_link( __( 'Edit', 'themify' ),' [',']' ); ?>
				</small>
			</p>
			<div class="commententry">
				<?php if ($comment->comment_approved == '0' ) : ?>
					<p><em><?php _e( 'Your comment is awaiting moderation.', 'themify' ) ?></em></p>
				<?php endif; ?>
				<?php comment_text(); ?>
			</div>
			<p class="reply">
				<?php comment_reply_link(array_merge( $args, array( 'add_below' => 'comment', 'depth' => $depth, 'reply_text' => __( 'Reply', 'themify' ), 'max_depth' => $args['max_depth']))) ?>
			</p>
		<?php
	}
}

/**
 * Output required classes like transition setting, builder row scrolling setting.
 * In single views, check if there's a video and add class accordingly.
 *
 * @since 1.0.0
 *
 * @param array $classes
 *
 * @return array
 */
function themify_theme_body_class( $classes ) {

	// Extract body classes related to sidebar or width to apply them later in .single-wrapper
	if ( is_singular( 'post' ) ) {
		foreach ( array( 'sidebar1', 'sidebar1 sidebar-left', 'sidebar2', 'sidebar-none', 'default_width', 'full_width' ) as $class ) {
			if ( $index_of = array_search( $class, $classes ) ) {
				unset( $classes[$index_of] );
			}
		}
	}

	// Image Filters
	if ( ! is_single() ) {
		$filter = '';
		$filter_hover = '';
		$apply_to = '';

		if ( is_page() ) {

			if ( $do_filter = themify_get( 'imagefilter_options' ) ) {
				if ( 'initial' != $do_filter ) {
					$filter = 'filter-' . $do_filter;
				}
			}

			if ( $do_hover_filter = themify_get( 'imagefilter_options_hover' ) ) {
				if ( 'initial' != $do_hover_filter ) {
					$filter_hover = 'filter-hover-' . $do_hover_filter;
				}
			}

			if ( $apply_here = themify_get('imagefilter_applyto') ) {
				if ( 'initial' != $apply_here ) {
					$apply_to = 'filter-' . $apply_here;
				}
			}

		}

		if ( '' == $filter ) {
			if ( $do_filter = themify_get( 'setting-imagefilter_options' ) ) {
				$filter = 'filter-' . $do_filter;
			}
		}

		if ( '' == $filter_hover ) {
			if ( $do_hover_filter = themify_get( 'setting-imagefilter_options_hover' ) ) {
				$filter_hover = 'filter-hover-' . $do_hover_filter;
			} else {
				$filter_hover = 'filter-hover-none';
			}
		}

		if ( '' == $apply_to ) {
			if ( '' != $filter || '' != $filter_hover ) {
				if ( 'allimages' == themify_get('setting-imagefilter_applyto') ) {
					$apply_to = 'filter-all';
				} else {
					$apply_to = 'filter-featured-only';
				}
			}
		}

		$classes[] = $filter;
		$classes[] = $filter_hover;
		$classes[] = $apply_to;
	}

	// Check if masonry is enabled
	$classes[] = themify_theme_is_masonry_enabled();

	// Check if user disabled drop caps
	$classes[] = themify_check( 'setting-disable_drop_cap' ) ? 'disable-drop-cap' : 'enable-drop-cap';

	if( ! is_active_sidebar( 'slideout-widgets' ) ) {
		$classes[] = 'slideout-widgets-empty';
	}

	return $classes;
}

/**
 * Compiles list of classes to apply CSS filters to images.
 *
 * @since 1.0.0
 *
 * @param array $classes List of classes. This is populated when called in the function filtering post_class.
 *
 * @return array         When called from post_class filter, returns array to merge with others.
 */
function themify_theme_single_image_filter_classes( $classes = array() ) {
	$filter = '';
	$filter_hover = '';
	$apply_to = '';

	if ( $do_filter = themify_get( 'imagefilter_options' ) ) {
		if ( 'initial' != $do_filter ) {
			$filter = 'filter-' . $do_filter;
		}
	}

	if ( $do_hover_filter = themify_get( 'imagefilter_options_hover' ) ) {
		if ( 'initial' != $do_hover_filter ) {
			$filter_hover = 'filter-hover-' . $do_hover_filter;
		}
	}

	if ( $apply_here = themify_get('imagefilter_applyto') ) {
		if ( 'initial' != $apply_here ) {
			$apply_to = 'filter-' . $apply_here;
		}
	}

	if ( '' == $filter ) {
		if ( $do_filter = themify_get( 'setting-imagefilter_options' ) ) {
			$filter = 'filter-' . $do_filter;
		}
	}

	if ( '' == $filter_hover ) {
		if ( $do_hover_filter = themify_get( 'setting-imagefilter_options_hover' ) ) {
			$filter_hover = 'filter-hover-' . $do_hover_filter;
		} else {
			$filter_hover = 'filter-hover-none';
		}
	}

	if ( '' == $apply_to ) {
		if ( '' != $filter || '' != $filter_hover ) {
			if ( 'allimages' == themify_get('setting-imagefilter_applyto') ) {
				$apply_to = 'filter-all';
			} else {
				$apply_to = 'filter-featured-only';
			}
		}
	}

	$classes[] = $filter;
	$classes[] = $filter_hover;
	$classes[] = $apply_to;

	return $classes;
}

/**
 * Add classes to single views (not pages). This is so entries loaded with Single Infinite can have the correct classes.
 *
 * @since 1.0.0
 *
 * @param array $classes
 *
 * @return array
 */
function themify_theme_post_class( $classes = array() ) {

	if ( is_single() && is_main_query() && ! isset( $_GET['themify_si'] ) ) {

		$classes = themify_theme_single_image_filter_classes( $classes );

	}

	return $classes;
}

/**
 * Return classes for single post. Works with standard single load and single infinite load.
 *
 * @since 1.0.0
 *
 * @return string
 */
function themify_theme_single_wrapper_classes() {
	global $themify;

	$classes = array();

	// Content width
	$classes[] = themify_get( 'content_width' );

	// Sidebar layout
	$classes[] = $themify->layout;

	// Image filters
	$classes = themify_theme_single_image_filter_classes( $classes );

	return join( ' ', $classes );
}

/**
 * Checks if masonry is enabled in this query page or in the default index layout settings.
 *
 * @since 1.0.0
 *
 * @return string
 */
function themify_theme_is_masonry_enabled() {
	$do_masonry = '';
	$post_type = '';
	if ( themify_is_query_page() ) {
		global $themify;
		if ( isset($themify->query_post_type) && !in_array( $themify->query_post_type, array( 'post', 'page' ) ) ) {
			$post_type = $themify->query_post_type . '_';
		}
		$enable_masonry = themify_get( $post_type . 'disable_masonry' );
		if ( 'yes' == $enable_masonry ) {
			$do_masonry = 'masonry-enabled';
		} elseif ( 'default' == $enable_masonry || '' == $enable_masonry ) {
			if ( 'no' != themify_get( 'setting-' . $post_type . 'disable_masonry' ) ) {
				$do_masonry = 'masonry-enabled';
			}
		}
	} else {
		if ( ! is_search() ) {
			$post_type = in_array( get_post_type(), array('post', 'page') ) ? '' : get_post_type() . '_';
		}
		if ( 'no' != themify_get( 'setting-' . $post_type . 'disable_masonry' ) ) {
			$do_masonry = 'masonry-enabled';
		}
	}
	return $do_masonry;
}

/**
 * Output JS template required for archive ad code.
 *
 * @since 1.0.0
 */
function themify_theme_ad_code_js_template() {
	if ( trim( themify_get( 'setting-ad_code' ) ) && ( is_archive() || is_tax() || is_search() || themify_is_query_page() ) ) :
		?>
		<script id="tmpl-themify_archive_ad" type="text/html">
			<article class="post type-post archive-divider-ad">
				{{{ data.ad_code }}}
			</article>
		</script>
		<?php
	endif;
}

/**
 * Return whether single infinite load is automatic or not.
 * Note: is true if auto load is disabled.
 *
 * @since 1.0.0
 *
 * @return bool
 */
function themify_theme_is_archive_infinite_enabled() {
	return 'infinite' == themify_check( 'setting-more_posts' );
}
