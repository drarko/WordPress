<?php
/***************************************************************************
 *  					Theme Functions
 * 	----------------------------------------------------------------------
 * 						DO NOT EDIT THIS FILE
 *	----------------------------------------------------------------------
 *
 *  					Copyright (C) Themify
 * 						http://themify.me
 *
 *  To add custom PHP functions to the theme, create a new 'custom-functions.php' file in the theme folder.
 *  They will be added to the theme automatically.
 *
 ***************************************************************************/

/////// Actions ////////
// Init post, page and additional post types if they exist
add_action( 'after_setup_theme', 'themify_theme_init_types' );

// Enqueue scripts and styles required by theme
add_action( 'wp_enqueue_scripts', 'themify_theme_enqueue_scripts', 11 );

// Browser compatibility
add_action( 'wp_head', 'themify_viewport_tag' );


// Register custom menu
add_action( 'init', 'themify_register_custom_nav');

// Register sidebars
add_action( 'widgets_init', 'themify_theme_register_sidebars' );

/////// Filters ////////
add_filter( 'themify_parallax_header', 'themify_disable_parallax_header_on_mobile' );

/**
 * Enqueue Stylesheets and Scripts
 * @since 1.0.0
 */
function themify_theme_enqueue_scripts(){

	// Get theme version for Themify theme scripts and styles
	$theme_version = wp_get_theme()->display('Version');

	///////////////////
	//Enqueue styles
	///////////////////

	// Google Web Fonts embedding
	wp_enqueue_style( 'google-fonts', themify_https_esc('http://fonts.googleapis.com/css'). '?family=Montserrat:400,700&subset=latin,latin-ext');

	if ( ! wp_script_is( 'themify-icon-font' ) ) {
		// Font Awesome
		wp_enqueue_style( 'themify-fontawesome', THEMIFY_URI . '/fontawesome/css/font-awesome.min.css', array(), $theme_version);
	}

	// Themify base styling
	wp_enqueue_style( 'theme-style', get_stylesheet_uri(), array(), $theme_version);

	// Themify Media Queries CSS
	wp_enqueue_style( 'themify-media-queries', THEME_URI . '/media-queries.css', array(), $theme_version);

	///////////////////
	//Enqueue scripts
	///////////////////

	// Dominant Color
	wp_enqueue_script( 'themify-dominant-color', THEME_URI . '/js/jquery.dominant-color.js', array(), $theme_version, true );

	// Modernizr
	wp_enqueue_script( 'themify-modernizr', THEME_URI . '/js/modernizr-3.3.1.min.js', array(), $theme_version, true );

	// Masonry
	wp_enqueue_script( 'themify-masonry', THEME_URI . '/js/jquery.masonry.min.js', array(), $theme_version, true );

	// Slide mobile navigation menu
	wp_enqueue_script( 'slide-nav', THEMIFY_URI . '/js/themify.sidemenu.js', array( 'jquery' ), $theme_version, true );

	// Themify internal scripts
	wp_enqueue_script( 'theme-script',	THEME_URI . '/js/themify.script.js', array('jquery'), $theme_version, true );

	// Inject variable values in gallery script
	wp_localize_script( 'theme-script', 'themifyScript', apply_filters('themify_script_vars', array(
		'lightbox' => themify_lightbox_vars_init(),
		'lightboxContext' => apply_filters('themify_lightbox_context', '#pagewrap'),
		'fixedHeader' 	=> themify_check('setting-fixed_header_disabled')? '': 'fixed-header',
		'ajax_nonce'	=> wp_create_nonce('ajax_nonce'),
		'ajax_url'		=> admin_url( 'admin-ajax.php' ),
		// Screen size at which horizontal menu is moved into side panel
		'smallScreen' => '760',
		// Resize refresh rate
		'resizeRefresh' => '250',
		// Video File ratio
		'videoRatio' => '1.777777777777778',
		'parallaxHeader' => apply_filters( 'themify_parallax_header', true )
	)));

	// WordPress internal script to move the comment box to the right place when replying to a user
	if ( is_single() || is_page() ) wp_enqueue_script( 'comment-reply' );
}

/**
 * Disable Parallax header on mobile devices
 * @param bool $bool
 * @return bool
 */
function themify_disable_parallax_header_on_mobile( $bool ) {
	if ( themify_is_touch() ) $bool = false;
	return $bool;
}

/**
 * Add viewport tag for responsive layouts
 * @since 1.0.0
 */
function themify_viewport_tag() {
	echo "\n".'<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">'."\n";
}

/* Custom Write Panels
/***************************************************************************/

///////////////////////////////////////
// Build Write Panels
///////////////////////////////////////

if ( ! function_exists( 'themify_theme_init_types' ) ) {
	/**
	 * Initialize custom panel with its definitions
	 * Custom panel definitions are located in admin/post-type-TYPE.php
	 * @since 1.0.0
	 */
	function themify_theme_init_types() {
		// Load Themify Social Share
		require_once( 'class-social-share.php' );

		// Load required files for post, page and custom post types where it applies
		foreach ( array( 'post', 'page', 'event', 'gallery', 'video' ) as $type ) {
			require_once( "admin/post-type-$type.php" );
		}
		/**
		 * Navigation menus used in page custom panel to specify a custom menu for the page.
		 * @var array
		 * @since 1.2.7
		 */
		$nav_menus = array(	array( 'name' => '', 'value' => '', 'selected' => true ) );
		foreach ( get_terms( 'nav_menu' ) as $menu ) {
			$nav_menus[] = array( 'name' => $menu->name, 'value' => $menu->slug );
		}

		themify_build_write_panels( apply_filters('themify_theme_meta_boxes',
			array(
				array(
					'name'		=> __('Post Options', 'themify'),
					'id' 		=> 'post-options',
					'options'	=> themify_theme_post_meta_box(),
					'pages'		=> 'post'
				),
				array(
					'name'		=> __('Page Options', 'themify'),
					'id' 		=> 'page-options',
					'options'	=> themify_theme_page_meta_box( array( 'nav_menus' => $nav_menus ) ),
					'pages'		=> 'page'
				),
				array(
					'name'		=> __('Query Posts', 'themify'),
					'id'		=> 'query-posts',
					'options'	=> themify_theme_query_post_meta_box(),
					'pages'		=> 'page'
				),
				array(
					'name'		=> __('Query Events', 'themify'),
					'id' 		=> 'query-event',
					'options'	=> themify_theme_query_event_meta_box(),
					'pages'		=> 'page'
				),
				array(
					'name'		=> __('Query Videos', 'themify'),
					'id' 		=> 'query-video',
					'options'	=> themify_theme_query_video_meta_box(),
					'pages'		=> 'page'
				),
				array(
					'name'		=> __('Query Galleries', 'themify'),
					'id' 		=> 'query-gallery',
					'options'	=> themify_theme_query_gallery_meta_box(),
					'pages'		=> 'page'
				),
				array(
					'name'		=> __('Event Options', 'themify'),
					'id' 		=> 'event-options',
					'options'	=> themify_theme_event_meta_box( array( 'nav_menus' => $nav_menus ) ),
					'pages'		=> 'event'
				),
				array(
					'name'		=> __('Video Options', 'themify'),
					'id' 		=> 'video-options',
					'options'	=> themify_theme_video_meta_box( array( 'nav_menus' => $nav_menus ) ),
					'pages'		=> 'video'
				),
				array(
					'name'		=> __('Gallery Options', 'themify'),
					'id' 		=> 'gallery-options',
					'options'	=> themify_theme_gallery_meta_box( array( 'nav_menus' => $nav_menus ) ),
					'pages'		=> 'gallery'
				),
			)
		));
	}
}

/* Custom Functions
/***************************************************************************/

///////////////////////////////////////
// Enable WordPress feature image
///////////////////////////////////////
add_theme_support( 'post-thumbnails' );

if ( ! function_exists( 'themify_register_custom_nav' ) ) {
	/**
	 * Register Custom Menu Function
	 * @since 1.0.0
	 */
	function themify_register_custom_nav() {
		register_nav_menus( array(
			'main-nav' => __( 'Main Navigation', 'themify' ),
			'footer-nav' => __( 'Footer Navigation', 'themify' ),
		));
	}
}

if ( ! function_exists( 'themify_default_main_nav' ) ) {
	/**
	 * Default Main Nav Function
	 * @since 1.0.0
	 */
	function themify_default_main_nav() {
		echo '<ul id="main-nav" class="main-nav clearfix">';
			wp_list_pages('title_li=');
		echo '</ul>';
	}
}

/**
 * Sets custom menu selected in page custom panel as navigation, otherwise sets the default.
 *
 * @since 1.0.0
 */
function themify_theme_menu_nav() {
	$custom_menu = themify_get( 'custom_menu' );
	if ( isset( $custom_menu ) && '' != $custom_menu ) {
		wp_nav_menu( array(
			'menu' => $custom_menu,
			'fallback_cb' => 'themify_default_main_nav',
			'container' => '',
			'menu_id' => 'main-nav',
			'menu_class' => 'main-nav'
		));
	} else {
		wp_nav_menu( array(
			'theme_location' => 'main-nav',
			'fallback_cb'    => 'themify_default_main_nav',
			'container'      => '',
			'menu_id'        => 'main-nav',
			'menu_class'     => 'main-nav'
		));
	}
}

if ( ! function_exists( 'themify_theme_register_sidebars' ) ) {
	/**
	 * Register sidebars
	 * @since 1.0.0
	 */
	function themify_theme_register_sidebars() {
		$sidebars = array(
			array(
				'name' => __('Sidebar', 'themify'),
				'id' => 'sidebar-main',
				'before_widget' => '<div id="%1$s" class="widget %2$s">',
				'after_widget' => '</div>',
				'before_title' => '<h4 class="widgettitle">',
				'after_title' => '</h4>',
			),
			array(
				'name' => __('Social Widget', 'themify'),
				'id' => 'social-widget',
				'before_widget' => '<div id="%1$s" class="widget %2$s">',
				'after_widget' => '</div>',
				'before_title' => '<strong class="widgettitle">',
				'after_title' => '</strong>',
			)
		);
		foreach( $sidebars as $sidebar ) {
			register_sidebar( $sidebar );
		}

		// Footer Sidebars
		themify_register_grouped_widgets();
	}
}

if ( ! function_exists( 'themify_theme_comment' ) ) {
	/**
	 * Custom Theme Comment
	 * @param object $comment Current comment.
	 * @param array $args Parameters for comment reply link.
	 * @param int $depth Maximum comment nesting depth.
	 */
	function themify_theme_comment( $comment, $args, $depth ) {
	   $GLOBALS['comment'] = $comment; ?>

		<li id="comment-<?php comment_ID() ?>">
			<p class="comment-author">
				<?php echo get_avatar( $comment, $size = '50' ); ?>
				<small><cite <?php comment_class(); ?>><span><?php echo get_comment_author_link(); ?></span></cite></small>
				<small class="comment-time">
					<?php comment_date( apply_filters('themify_comment_date', '') ); ?>
					 @
					<?php comment_time( apply_filters('themify_comment_time', '') ); ?>
					<?php edit_comment_link( __('Edit', 'themify'),' [',']'); ?>
				</small>
				<span class="reply">
					<?php comment_reply_link(array_merge( $args, array('add_below' => 'comment', 'depth' => $depth, 'reply_text' => __( 'Reply', 'themify' ), 'max_depth' => $args['max_depth']))) ?>
				</span>
			</p>
			<div class="commententry">
				<?php if ($comment->comment_approved == '0') : ?>
					<p><em><?php _e('Your comment is awaiting moderation.', 'themify') ?></em></p>
				<?php endif; ?>
				<?php comment_text(); ?>
			</div>
		<?php
	}
}

if ( ! function_exists( 'themify_theme_has_submenu' ) ) {
	/**
	 * Sets custom class if menu item has a submenu.
	 * @param array $sorted_menu_items The menu items to filter.
	 * @return array The filtered menu items.
	 * @since 1.0.0
	 */
	function themify_theme_has_submenu( $sorted_menu_items ) {
		$last_top = 0;
		foreach ( $sorted_menu_items as $key => $obj ) {
			if ( 0 == $obj->menu_item_parent ) {
				$last_top = $key;
			} else {
				$sorted_menu_items[$last_top]->classes['has-sub-menu'] = 'has-sub-menu';
			}
		}
		return $sorted_menu_items;
	}
	add_filter( 'wp_nav_menu_objects', 'themify_theme_has_submenu', 10 );
}

if ( ! function_exists( 'themify_theme_likeit' ) ) {
	/**
	 * Checks liker's IP and saves it to the post if it's not already in likers list.
	 * @since 1.0.0
	 */
	function themify_theme_likeit() {
		check_ajax_referer( 'ajax_nonce', 'nonce' );

		$post_id = $_POST['post_id'];

		$ip = $_SERVER['REMOTE_ADDR'];

		$current_likers = trim( get_post_meta($post_id, 'likers', true) );

		if( isset( $current_likers ) && '' != $current_likers ) {
			$current_likers_count = count( explode( ',', $current_likers ) );
		} else {
			$current_likers_count = 0;
		}

		if( false === stripos( $current_likers, $ip ) ) {

			$save_likers = isset( $current_likers ) && '' != $current_likers? $current_likers . ',' . $ip :	$ip;

			$update_result = update_post_meta($post_id, 'likers', $save_likers);

			if ( $update_result ) {
				echo json_encode( array(
					'status' => 'new',
					'likers' => $current_likers_count + 1,
					'ip' => $ip
				) );
			} else {
				echo json_encode( array(
					'status' => 'failed',
					'ip' => $ip
				) );
			}
		} else {
			echo json_encode( array(
				'status' => 'isliker',
				'ip' => $ip
			) );
		}
		die();
	}
	add_action('wp_ajax_themify_likeit', 'themify_theme_likeit');
	add_action('wp_ajax_nopriv_themify_likeit', 'themify_theme_likeit');
}

if ( ! function_exists( 'themify_theme_get_like' ) ) {
	/**
	 * Return number of likers or 0
	 * @param bool $echo Whether to echo or just return
	 * @return string
	 * @since 1.0.0
	 */
	function themify_theme_get_like( $echo = false ) {
		if( $current_likers = themify_get('likers') ) {
			$likers = explode(',', trim($current_likers));
			$count = count($likers);
		} else {
			$count = '0';
		}
		if ( $echo ) echo $count;
		return $count;
	}
}

if ( ! function_exists( 'themify_theme_is_liker' ) ) {
	/**
	 * Check if visitor already likes this entry
	 * @param bool $echo Whether to echo or just return
	 * @return string
	 * @since 1.0.0
	 */
	function themify_theme_is_liker( $post_id ) {
		$current_likers = trim( get_post_meta($post_id, 'likers', true) );
		if( false === stripos( $current_likers, $_SERVER['REMOTE_ADDR'] ) ) {
			// IP wasn't found among likers, he doesn't like this yet
			return false;
		} else {
			// IP was found among likers, he likes this already
			return true;
		}
	}
}

if ( ! function_exists( 'themify_theme_set_pageviews' ) ) {
	/**
	 * Sets the page view count for this entry.
	 * @since 1.0.0
	 */
	function themify_theme_set_pageviews() {
		if ( is_singular() ) {
			$post_id = get_the_ID();
			$field = 'themify_pageviews';
			$count = intval( get_post_meta( $post_id, $field, true ) );
			$count++;
			update_post_meta( $post_id, $field, $count );
		}
	}
	add_action( 'wp_head', 'themify_theme_set_pageviews' );
}

if ( ! function_exists( 'themify_theme_get_pageviews' ) ) {
	/**
	 * Returns the page view count for this entry.
	 * @return int|mixed
	 * @since 1.0.0
	 */
	function themify_theme_get_pageviews() {
		if ( $count = intval( get_post_meta( get_the_ID(), 'themify_pageviews', true ) ) ) {
			$out = themify_theme_get_short_number( $count );
		} else {
			$out = 0;
		}
		return $out;
	}
}

if ( ! function_exists( 'themify_theme_get_short_number' ) ) {
	/**
	 * Returns an abbreviated number.
	 * @param $count
	 * @return string
	 * @since 1.0.0
	 */
	function themify_theme_get_short_number( $count ) {
		/**
		 * @param int $precision The number of decimals.
		 */
		$precision = apply_filters( 'themify_theme_short_number_precision', 1 );
		if ( $count > 999 && $count <= 999999 ) {
			$out = sprintf( '%sk', number_format( $count / 1000, $precision ) );
		} else if ( $count > 999999 && $count <= 999999999 ) {
			$out = sprintf( '%sm', number_format( $count / 1000000, $precision ) );
		} else if ( $count > 999999999 ) {
			$out = sprintf( '%sb', number_format( $count / 1000000000, $precision ) );
		} else {
			$out = $count;
		}
		return $out;
	}
}

if ( ! function_exists( 'themify_theme_content_width' ) ) {
	/**
	 * Checks if the single post or page has default or full width.
	 * @param array $classes
	 * @return array
	 * @since 1.0.0
	 */
	function themify_theme_content_width( $classes = array() ) {
		$classes[] = themify_check( 'content_width' ) ? themify_get( 'content_width' ) : 'default_width';
		$classes[] = themify_check('setting-fixed_header_disabled')? '': 'has-fixed-header';
		return $classes;
	}
	add_filter( 'body_class', 'themify_theme_content_width' );
}

if ( ! function_exists( 'themify_theme_custom_post_css' ) ) {
	/**
	 * Outputs custom post CSS at the end of a post
	 * @since 1.0.0
	 */
	function themify_theme_custom_post_css() {
		if ( in_array( get_post_type(), array( 'event', 'gallery', 'video' ) ) ) {
			$post_id = '.postid-'.get_the_ID().' .featured-area';
			$css = array();
			$style = '';
			$rules = array(
				"$post_id" => array(
					array(	'prop' => 'background-color',
							  'key' => 'background_color'
					),
					array(	'prop' => 'background-image',
							  'key' => 'background_image'
					),
					array(	'prop' => 'background-repeat',
							  'key' => 'background_repeat'
					)
				),
			);
			foreach ( $rules as $selector => $property ) {
				foreach ( $property as $val ) {
					$prop = $val['prop'];
					$key = $val['key'];
					if ( is_array( $key ) ) {
						if ( $prop == 'font-size' && themify_check( $key[0] ) ) {
							$css[$selector][$prop] = $prop . ': ' . themify_get( $key[0] ) . themify_get( $key[1] );
						}
					} elseif ( themify_check( $key ) && 'default' != themify_get( $key ) ) {
						if ( $prop == 'color' || stripos( $prop, 'color' ) ) {
							$css[$selector][$prop] = $prop . ': #' . themify_get( $key );
						}
						elseif ( $prop == 'background-image' && 'default' != themify_get( $key ) ) {
							$css[$selector][$prop] = $prop .': url(' . themify_get( $key ) . ')';
						}
						elseif ( $prop == 'background-repeat' && 'fullcover' == themify_get( $key ) ) {
							continue;
						}
						elseif ( $prop == 'font-family' ) {
							$font = themify_get( $key );
							$css[$selector][$prop] = $prop .': '. $font;
							if ( ! in_array( $font, themify_get_web_safe_font_list( true ) ) ) {
								global $themify;
								if ( isset( $themify->google_fonts ) ) {
									$themify->google_fonts .= str_replace( ' ', '+', $font.'|' );
								}
							}
						}
						else {
							$css[$selector][$prop] = $prop .': '. themify_get( $key );
						}
					}
				}
				if ( ! empty( $css[$selector] ) ) {
					$style .= "$selector {\n\t" . implode( ";\n\t", $css[$selector] ) . "\n}\n";
				}
			}

			if ( '' != $style ) {
				echo "\n<!-- $post_id Style -->\n<style>\n$style</style>\n<!-- End $post_id Style -->\n";
			}
		}
	}
	add_action( 'themify_post_end', 'themify_theme_custom_post_css' );
}

if ( ! function_exists( 'themify_theme_featured_area_style' ) ) {
	function themify_theme_featured_area_style() {
		return themify_check('background_repeat')? themify_get('background_repeat'):'';
	}
}

/**
 * Set the fixed-header selector for the scroll highlight script
 *
 * @since 1.1.3
 */
function themify_theme_scroll_highlight_vars( $vars ) {
	$vars['fixedHeaderSelector'] = '#header.header-on-scroll';
	return $vars;
}
add_filter( 'themify_builder_scroll_highlight_vars', 'themify_theme_scroll_highlight_vars' );

/**
 * Allow featured areas to launch fullscreen touch gallery.
 *
 * @since 1.2.9
 *
 * @param array $vars Gallery configuration list.
 *
 * @return array
 */
function themify_theme_configure_gallery( $vars ) {
	$vars['contentImagesAreas'] .= ', .featured-area';
	return $vars;
}
add_filter( 'themify_gallery_plugins_args', 'themify_theme_configure_gallery' );

/**
 * Configure social share items.
 *
 * @since 1.4.0
 *
 * @param array $settings
 *
 * @return array
 */
function themify_theme_social_share_settings( $settings ) {
	$settings['share_html'] = apply_filters('themify_share_html', sprintf( '
			<div class="box">
				<a href="#" class="count">{total}</a>
				<a href="#" class="share">%s</a>
			</div>
			<div class="social-share clearfix">
				%s
			</div>
			<!-- .social-share -->',
			__( 'Share', 'themify' ),
			$settings['share_html']
		)
	);
	$settings['share_item'] = '.post-share';
	return $settings;
}
add_filter( 'themify_social_share_settings', 'themify_theme_social_share_settings' );

/**
 * Get event repeat date of post
 *
 * @return string
 */
function themify_theme_get_repeat_date( $type, $number,$date, $time ) {
        $result = '';
        switch($type){
            case 'day':
                $result = sprintf(_n('Every day','Every %s days',$number,'themify'),$number);
            break;
            case 'week':
                $result = sprintf(_n('Every week on %2$s','Every %s weeks on %s',$number,'themify'),$number,  date_i18n('l',  strtotime($date)));
            break;
            case 'year':
                $result = sprintf(_n('Every year on %2$s','Every %s years on %s',$number,'themify'),$number,  date_i18n('M d',  strtotime($date)));
            break;
        }
        if($result && $time){
            $result.=_x( ' @ ', 'Connector between date and time (with spaces around itself) in event date and time.', 'themify' ).date_i18n( get_option( 'time_format' ), strtotime( $time ) ) ;
        }
        return apply_filters('themify_event_date_repeat',$result,$type, $number,$date, $time);
}
